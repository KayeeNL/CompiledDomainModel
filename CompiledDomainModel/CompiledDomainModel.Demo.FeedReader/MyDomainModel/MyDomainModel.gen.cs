// Refresh from URL: http://sitecorewebsite/sitecore%20modules/Shell/CompiledDomainModel/CodeGenerator.aspx?direct=DomainModelGenerator
/*
 * This file was generated by the CompiledDomainModel Sitecore module (version 0.5.5.0).
 * User 'sitecore\admin' generated this file.
 * The version of the domain model (auto-incremented) is 35.
 * Please do not modify anything in this file, as any modifications will be lost after re-generating it.
 * Instead, you can extend the functionality of the classes and interfaces in this file using partial classes, inheritance or extension methods.
 * 
 * Visit http://trac.sitecore.net/CompiledDomainModel/wiki if you need more information.
 */
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using Sitecore.Data;
using Sitecore.Data.Items;
using Sitecore.Data.Fields;
using Sitecore.Diagnostics;
using CompiledDomainModel.Attributes;

namespace MyDomainModel
{
    /// <summary>
    /// Wrapper class for Sitecore items. Provides typed access to related items.
    /// </summary>
    [VersionAttribute("0.5.5.0", 35)]
    public partial class ItemWrapper : IItemWrapper, INotifyPropertyChanging, INotifyPropertyChanged
    {
        /// <summary>
        /// Map template IDs to a corresponding type in the domain model.
        /// </summary>
        protected static readonly IDictionary<ID, Type> TypeMappings = new Dictionary<ID, Type>
        {
          { MyDomainModel.FeedReader.FeedCollection.TEMPLATE_ID, typeof(MyDomainModel.FeedReader.FeedCollection) },
          { MyDomainModel.FeedReader.Feed.TEMPLATE_ID, typeof(MyDomainModel.FeedReader.Feed) },
          { MyDomainModel.FeedReader.FeedItem.TEMPLATE_ID, typeof(MyDomainModel.FeedReader.FeedItem) },
          { MyDomainModel.FeedReader.Comment.TEMPLATE_ID, typeof(MyDomainModel.FeedReader.Comment) },
        };

        /// <summary>
        /// Map contributing template IDs to a corresponding interface.
        /// If a domain model class implements the interface, it means that the template inherits this contributing template.
        /// </summary>
        protected static readonly IDictionary<ID, Type> ContributingTypeMappings = new Dictionary<ID, Type>
        {
        };

        /// <summary>
        /// Determines what templates (within scope of the domain model configuration) a certain type supports.
        /// </summary>
        /// <typeparam name="T">The type to find valid template IDs for.</typeparam>
        /// <returns>A list of template IDs that are valid for the type.</returns>
        protected static IEnumerable<ID> GetValidTemplateIdsForType<T>() where T : IItemWrapper
        {
            return TypeMappings.Concat(ContributingTypeMappings).Where(typeMapping => typeof(T).IsAssignableFrom(typeMapping.Value)).Select(typeMapping => typeMapping.Key);
        }

        /// <summary>
        /// Event that is fired before the value of a field is changed through the domain model.
        /// </summary>
        public event PropertyChangingEventHandler PropertyChanging;

        /// <summary>
        /// Event that is fired after the value of a field is changed through the domain model.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// The Sitecore item that is wrapped. It must always be passed through a constructor.
        /// </summary>
        public Item Item { get; private set; }

        /// <summary>
        /// Create a wrapper for the passed in item.
        /// </summary>
        /// <param name="item">The Sitecore item to create a wrapper for.</param>
        public ItemWrapper(Item item)
        {
            Assert.IsNotNull(item, string.Format("No item was passed to create a new '{0}' object", GetType().ToString()));
            Item = item;
        }

        /// <summary>
        /// Use this method to wrap any Sitecore item. If the item can be used in a typed way, then you will get an object of that type.
        /// </summary>
        /// <param name="item">The Sitecore item to create a typed wrapper for.</param>
        /// <returns>An item wrapper (typed, if possible).</returns>
        public static ItemWrapper CreateTypedWrapper(Item item)
        {
            return (item != null && TypeMappings.ContainsKey(item.TemplateID))
                ? TypeMappings[item.TemplateID].InvokeMember("ctor", System.Reflection.BindingFlags.CreateInstance, null, null, new object[] { item }) as ItemWrapper
                : new ItemWrapper(item);
        }

        /// <summary>
        /// Get a typed wrapper for the parent of the item.
        /// </summary>
        public virtual IItemWrapper Parent
        {
            get
            {
                return Item.Parent != null ? CreateTypedWrapper(Item.Parent) : null;
            }
        }

        /// <summary>
        /// Get a list of typed wrappers for all the child items.
        /// </summary>
        public virtual IEnumerable<IItemWrapper> Children
        {
            get
            {
                if (!Item.HasChildren)
                {
                    return null;
                }
                IEnumerable<IItemWrapper> childObjects = Item.Children.InnerChildren.Select(child => CreateTypedWrapper(child)).Where(child => child != null).OfType<IItemWrapper>();
                return childObjects.Count() > 0 ? childObjects : null;
            }
        }

        /// <summary>
        /// Get a list of typed wrappers for all the child items that can be wrapped with the specified type.
        /// </summary>
        /// <typeparam name="T">The type to filter the children with.</typeparam>
        /// <returns>The list of children of the specified type.</returns>
        public virtual IEnumerable<T> GetChildren<T>() where T : IItemWrapper
        {
            IEnumerable<IItemWrapper> childObjects = Children;
            IEnumerable<T> typedChildren = childObjects != null ? childObjects.OfType<T>() : null;
            return typedChildren != null && typedChildren.Count() > 0 ? typedChildren : null;
        }

        /// <summary>
        /// Iterates all the item's ancestors and returns the first one that is of the specified type.
        /// </summary>
        /// <typeparam name="T">The type of ancestor that is needed.</typeparam>
        /// <returns>A typed wrapper for the first ancestor of the specified type.</returns>
        public virtual T GetFirstAncestor<T>() where T : class, IItemWrapper
        {
            IItemWrapper parent = Parent;
            if (parent == null)
            {
                return null;
            }
            else if (parent as T != null)
            {
                return parent as T;
            }
            return parent.GetFirstAncestor<T>();
        }

        /// <summary>
        /// Returns a list of all the item's descendants of the specified type.
        /// Warning: only use this if you're certain it will not return too much; could cause performance issues.
        /// </summary>
        /// <typeparam name="T">Type to filter the result with.</typeparam>
        /// <returns>The list of descendants of the specified type.</returns>
        public virtual IEnumerable<IItemWrapper> Descendants
        {
            get
            {
                Item[] descendantItems = Item.Axes.GetDescendants();
                if (descendantItems == null || descendantItems.Length == 0)
                {
                    return null;
                }
                IEnumerable<IItemWrapper> descendantObjects = descendantItems.Select(descendant => CreateTypedWrapper(descendant)).Where(descendant => descendant != null).OfType<IItemWrapper>();
                return descendantObjects.Count() > 0 ? descendantObjects : null;
            }
        }

        /// <summary>
        /// Returns a list of all the item's descendants of the specified type.
        /// Warning: only use this if you're certain it will not return too much; could cause performance issues.
        /// </summary>
        /// <typeparam name="T">Type to filter the result with.</typeparam>
        /// <returns>The list of descendants of the specified type.</returns>
        public virtual IEnumerable<T> GetDescendants<T>() where T : IItemWrapper
        {
            IEnumerable<IItemWrapper> descendants = Descendants;
            if (descendants == null || descendants.Count() == 0)
            {
                return null;
            }
            IEnumerable<T> descendantObjects = descendants.OfType<T>();
            return descendantObjects.Count() > 0 ? descendantObjects : null;
        }

        /// <summary>
        /// Gets a list of all the items that refer to this item.
        /// Warning: this only works if the link database is enabled.
        /// Visit http://sdn.sitecore.net/SDN5/Articles/Administration/Links%20Database.aspx for more information.
        /// </summary>
        public virtual IEnumerable<IItemWrapper> Referrers
        {
            get
            {
                Sitecore.Links.ItemLink[] referrers = Sitecore.Globals.LinkDatabase.GetReferrers(Item);
                if (referrers == null || referrers.Length == 0)
                {
                    return null;
                }
                IEnumerable<IItemWrapper> referrerObjects = referrers.Select(referrer => CreateTypedWrapper(referrer.GetSourceItem())).Where(referrer => referrer != null).OfType<IItemWrapper>();
                return referrerObjects.Count() > 0 ? referrerObjects : null;
            }
        }

        /// <summary>
        /// Gets a list of all the items that refer to this item and that are of the specified type.
        /// Warning: this only works if the link database is enabled.
        /// Visit http://sdn.sitecore.net/SDN5/Articles/Administration/Links%20Database.aspx for more information.
        /// </summary>
        /// <typeparam name="T">Type to filter the result with.</typeparam>
        /// <returns>A list of all the items that refer to this item and that are of the specified type.</returns>
        public virtual IEnumerable<T> GetReferrers<T>() where T : IItemWrapper
        {
            IEnumerable<IItemWrapper> referrerObjects = Referrers;
            IEnumerable<T> typedReferrerObjects = referrerObjects != null ? referrerObjects.OfType<T>() : null;
            return typedReferrerObjects != null && typedReferrerObjects.Count() > 0 ? typedReferrerObjects : null;
        }

        /// <summary>
        /// Checks to see if the wrappers wrap the same item (compares by id).
        /// </summary>
        /// <param name="obj">The object to compare to.</param>
        /// <returns>True if the item ID's are the same.</returns>
        public override bool Equals(object obj)
        {
            if (obj as ItemWrapper == null)
            {
                return false;
            }
            return Object.Equals(Item.ID, ((ItemWrapper)obj).Item.ID)
                && Object.Equals(Item.Version.Number, ((ItemWrapper)obj).Item.Version.Number)
                && Object.Equals(Item.Language, ((ItemWrapper)obj).Item.Language);
        }

        /// <summary>
        /// Creates a hashcode (for example, for use in a hashset).
        /// </summary>
        /// <returns>A unique hashcode for the object.</returns>
        public override int GetHashCode()
        {
            return ((Item.ID.GetHashCode() * 13) + 2)
                * ((Item.Version.Number.GetHashCode() * 23) + 8)
                * ((Item.Language.GetHashCode() * 97) + 12);
        }

        /// <summary>
        /// Can be used to signal event listeners that a property that is about to change.
        /// </summary>
        /// <param name="propertyName">The name of the property that is about to change.</param>
        protected virtual void RaisePropertyChanging(string propertyName)
        {
            if (PropertyChanging != null)
            {
                PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }

        /// <summary>
        /// Can be used to signal event listeners that a property has just changed.
        /// </summary>
        /// <param name="propertyName">The name of the property that has just changed.</param>
        protected virtual void RaisePropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// Get a Sitecore custom field by ID or fieldname (fallback).
        /// </summary>
        /// <typeparam name="T">The type of the field.</typeparam>
        /// <param name="fieldId">The Sitecore ID of the field.</param>
        /// <param name="fieldName">The name of the field.</param>
        /// <returns>The custom field object.</returns>
        protected virtual T GetField<T>(ID fieldId, string fieldName) where T : CustomField
        {
            return FieldTypeManager.GetField(GetField(fieldId, fieldName)) as T;
        }

        /// <summary>
        /// Get a Sitecore field by ID or fieldname (fallback).
        /// </summary>
        /// <param name="fieldId">The Sitecore ID of the field.</param>
        /// <param name="fieldName">The name of the field.</param>
        /// <returns>The field object.</returns>
        protected virtual Field GetField(ID fieldId, string fieldName)
        {
            return Item.Fields[fieldId] != null ? Item.Fields[fieldId] : Item.Fields[fieldName];
        }

        /// <summary>
        /// Override this method if you need a different strategy of resolving links within the domain model.
        /// </summary>
        /// <param name="link">The link field that needs to be resolved.</param>
        /// <returns>A string that represents the resolved link.</returns>
        protected virtual string ResolveLink(LinkField link)
        {
            return link.IsInternal || link.IsMediaLink
                ? ResolveLink(link.TargetItem)
                : link.Url;
        }

        /// <summary>
        /// Override this method if you need a different strategy of resolving links within the domain model.
        /// </summary>
        /// <param name="item">The item for which to resolve a link.</param>
        /// <returns>A string that represents the resolved link.</returns>
        protected virtual string ResolveLink(Item item)
        {
            return item != null ? Sitecore.Links.LinkManager.GetItemUrl(item) : null;
        }
    }

    /// <summary>
    /// The base class for all domain objects. Objects of this type can only be created for templates that are configured in the CompiledDomainModel configuration.
    /// </summary>
    public partial class DomainObjectBase : ItemWrapper
    {

        protected DomainObjectBase(Item item)
            : base(item)
        {
            Assert.IsTrue(ItemWrapper.TypeMappings.ContainsKey(item.TemplateID), string.Format("Tried to create a '{0}', but there is no domain object specified for template '{1}'", this.GetType().Name, item.TemplateName));
            Assert.IsTrue(this.GetType().IsAssignableFrom(ItemWrapper.TypeMappings[item.TemplateID]), string.Format("Tried to create a '{0}', but the template '{1}' is not valid for that type", this.GetType().Name, item.TemplateName));
        }
    }

    /// <summary>
    /// Interface for all wrappers and contributing templates.
    /// </summary>
    public partial interface IItemWrapper : CompiledDomainModel.Core.IItemWrapperCore
    {
        IItemWrapper Parent { get; }
        IEnumerable<IItemWrapper> Children { get; }
        IEnumerable<T> GetChildren<T>() where T : IItemWrapper;
        T GetFirstAncestor<T>() where T : class, IItemWrapper;
        IEnumerable<IItemWrapper> Descendants { get; }
        IEnumerable<T> GetDescendants<T>() where T : IItemWrapper;
        IEnumerable<IItemWrapper> Referrers { get; }
        IEnumerable<T> GetReferrers<T>() where T : IItemWrapper;
    }

    /// <summary>
    /// Marker interface for all contributing templates (templates that are not used as domain model classes, but that are implemented by domain model classes).
    /// </summary>
    public partial interface IContributingTemplate : IItemWrapper
    {
    }

}

// Domain objects for set "FeedReader"
namespace MyDomainModel.FeedReader
{

    /// <summary>
    /// Typed wrapper class for items with template FeedCollection.
    /// Description: Item that groups several feeds together
    /// </summary>
    [DomainObjectAttribute("{D937A3F8-AC08-4524-BF91-0B17C6947D9C}", "FeedCollection", new string[] { "master" })]
    public partial class FeedCollection : DomainObjectBase
    {
        public const string TEMPLATE_NAME = "FeedCollection";
        public static readonly ID TEMPLATE_ID = ID.Parse("{D937A3F8-AC08-4524-BF91-0B17C6947D9C}");

        public FeedCollection(Item item)
            : base(item)
        {
        }

        #region Settings

        [DomainObjectFieldAttribute("{3466C982-7E21-45A7-B94B-D7AA00D75F1E}", "Remove old items", "Checkbox")]
        public const string FIELD_REMOVE_OLD_ITEMS = "Remove old items";

        /// <summary>
        /// Description: If checked, removes items that are no longer on the live feed
        /// </summary>
        public bool RemoveOldItems
        {
            get
            {
                return GetField<CheckboxField>(ID.Parse("{3466C982-7E21-45A7-B94B-D7AA00D75F1E}"), "Remove old items").Checked;
            }
            set
            {
                CheckboxField field = GetField<CheckboxField>(ID.Parse("{3466C982-7E21-45A7-B94B-D7AA00D75F1E}"), "Remove old items");
                if (Object.Equals(field.Checked, value))
                {
                    return;
                }
                RaisePropertyChanging("RemoveOldItems");
                field.Checked = value;
                RaisePropertyChanged("RemoveOldItems");
            }
        }

        #endregion

    }

    /// <summary>
    /// Typed wrapper class for items with template Feed.
    /// Description: A RSS feed
    /// </summary>
    [DomainObjectAttribute("{830E3C8F-9A0E-4058-BB6D-32BB9A0190FC}", "Feed", new string[] { "master" })]
    public partial class Feed : DomainObjectBase
    {
        public const string TEMPLATE_NAME = "Feed";
        public static readonly ID TEMPLATE_ID = ID.Parse("{830E3C8F-9A0E-4058-BB6D-32BB9A0190FC}");

        public Feed(Item item)
            : base(item)
        {
        }

        #region Feed settings

        [DomainObjectFieldAttribute("{3E618217-63FD-47C2-8732-7FFD59A6AD11}", "Url", "General Link")]
        public const string FIELD_URL = "Url";

        [DomainObjectFieldAttribute("{E8EEEA54-E884-4B36-9073-9BE73119AE9C}", "Name", "Single-Line Text")]
        public const string FIELD_NAME = "Name";

        /// <summary>
        /// Description: The URL that points to the feed
        /// </summary>
        public string Url
        {
            get
            {
                LinkField link = GetField<LinkField>(ID.Parse("{3E618217-63FD-47C2-8732-7FFD59A6AD11}"), "Url");
                return ResolveLink(link);
            }
            set
            {
                LinkField field = GetField<LinkField>(ID.Parse("{3E618217-63FD-47C2-8732-7FFD59A6AD11}"), "Url");
                if (Object.Equals(field.Url, value))
                {
                    return;
                }
                RaisePropertyChanging("Url");
                field.Url = value;
                RaisePropertyChanged("Url");
            }
        }

        /// <summary>
        /// Description: The friendly name of the feed
        /// </summary>
        public string Name
        {
            get
            {
                return GetField(ID.Parse("{E8EEEA54-E884-4B36-9073-9BE73119AE9C}"), "Name").Value;
            }
            set
            {
                Field field = GetField(ID.Parse("{E8EEEA54-E884-4B36-9073-9BE73119AE9C}"), "Name");
                if (Object.Equals(field.Value, value))
                {
                    return;
                }
                RaisePropertyChanging("Name");
                field.Value = value;
                RaisePropertyChanged("Name");
            }
        }

        #endregion

    }

    /// <summary>
    /// Typed wrapper class for items with template FeedItem.
    /// Description: One entry on a feed
    /// </summary>
    [DomainObjectAttribute("{9B0A6EA2-BB48-4F02-9106-6687C819CD97}", "FeedItem", new string[] { "master" })]
    public partial class FeedItem : DomainObjectBase
    {
        public const string TEMPLATE_NAME = "FeedItem";
        public static readonly ID TEMPLATE_ID = ID.Parse("{9B0A6EA2-BB48-4F02-9106-6687C819CD97}");

        public FeedItem(Item item)
            : base(item)
        {
        }

        #region Feed item

        [DomainObjectFieldAttribute("{9C902A6C-8F15-4C67-97F9-A5068D9A7BB0}", "Title", "Single-Line Text")]
        public const string FIELD_TITLE = "Title";

        [DomainObjectFieldAttribute("{AC0D8E15-E1C8-4BFB-9D52-92A4FCBCCAC7}", "Link", "General Link")]
        public const string FIELD_LINK = "Link";

        [DomainObjectFieldAttribute("{16590A06-8399-4FEB-8C7E-97A94EF73E3B}", "Description", "Multi-Line Text")]
        public const string FIELD_DESCRIPTION = "Description";

        /// <summary>
        /// Description: The title as available in the feed
        /// </summary>
        public string Title
        {
            get
            {
                return GetField(ID.Parse("{9C902A6C-8F15-4C67-97F9-A5068D9A7BB0}"), "Title").Value;
            }
            set
            {
                Field field = GetField(ID.Parse("{9C902A6C-8F15-4C67-97F9-A5068D9A7BB0}"), "Title");
                if (Object.Equals(field.Value, value))
                {
                    return;
                }
                RaisePropertyChanging("Title");
                field.Value = value;
                RaisePropertyChanged("Title");
            }
        }

        /// <summary>
        /// Description: Link to the item as available in the feed
        /// </summary>
        public string Link
        {
            get
            {
                LinkField link = GetField<LinkField>(ID.Parse("{AC0D8E15-E1C8-4BFB-9D52-92A4FCBCCAC7}"), "Link");
                return ResolveLink(link);
            }
            set
            {
                LinkField field = GetField<LinkField>(ID.Parse("{AC0D8E15-E1C8-4BFB-9D52-92A4FCBCCAC7}"), "Link");
                if (Object.Equals(field.Url, value))
                {
                    return;
                }
                RaisePropertyChanging("Link");
                field.Url = value;
                RaisePropertyChanged("Link");
            }
        }

        /// <summary>
        /// Description: The item content, or a summary thereof
        /// </summary>
        public string Description
        {
            get
            {
                return GetField(ID.Parse("{16590A06-8399-4FEB-8C7E-97A94EF73E3B}"), "Description").Value;
            }
            set
            {
                Field field = GetField(ID.Parse("{16590A06-8399-4FEB-8C7E-97A94EF73E3B}"), "Description");
                if (Object.Equals(field.Value, value))
                {
                    return;
                }
                RaisePropertyChanging("Description");
                field.Value = value;
                RaisePropertyChanged("Description");
            }
        }

        #endregion

    }

    /// <summary>
    /// Typed wrapper class for items with template Comment.
    /// Description: A comment on an item in a feed
    /// </summary>
    [DomainObjectAttribute("{A68AF918-0EE9-4A2E-8514-1165EBE1D7B0}", "Comment", new string[] { "master" })]
    public partial class Comment : DomainObjectBase
    {
        public const string TEMPLATE_NAME = "Comment";
        public static readonly ID TEMPLATE_ID = ID.Parse("{A68AF918-0EE9-4A2E-8514-1165EBE1D7B0}");

        public Comment(Item item)
            : base(item)
        {
        }

        #region Comment

        [DomainObjectFieldAttribute("{222D737E-AB73-4D6C-BFE6-6362F1B9580C}", "Text", "Single-Line Text")]
        public const string FIELD_TEXT = "Text";

        [DomainObjectFieldAttribute("{28E29796-50D2-4E51-88DE-A0089D2734BF}", "FeedItem", "Internal Link")]
        public const string FIELD_FEED_ITEM = "FeedItem";

        /// <summary>
        /// Description: Comment text
        /// </summary>
        public string Text
        {
            get
            {
                return GetField(ID.Parse("{222D737E-AB73-4D6C-BFE6-6362F1B9580C}"), "Text").Value;
            }
            set
            {
                Field field = GetField(ID.Parse("{222D737E-AB73-4D6C-BFE6-6362F1B9580C}"), "Text");
                if (Object.Equals(field.Value, value))
                {
                    return;
                }
                RaisePropertyChanging("Text");
                field.Value = value;
                RaisePropertyChanged("Text");
            }
        }

        /// <summary>
        /// Description: The item in a feed that the comment aplies to
        /// </summary>
        public ItemWrapper FeedItem
        {
            get
            {
                Item item = GetField<InternalLinkField>(ID.Parse("{28E29796-50D2-4E51-88DE-A0089D2734BF}"), "FeedItem").TargetItem;
                return item != null ? ItemWrapper.CreateTypedWrapper(item) : null;
            }
            set
            {
                InternalLinkField field = GetField<InternalLinkField>(ID.Parse("{28E29796-50D2-4E51-88DE-A0089D2734BF}"), "FeedItem");
                if (Object.Equals(field.Value, value))
                {
                    return;
                }
                RaisePropertyChanging("FeedItem");
                field.Value = value.Item.ID.ToString();
                RaisePropertyChanged("FeedItem");
            }
        }

        public T GetFeedItem<T>() where T : ItemWrapper
        {
            return FeedItem as T;
        }

        #endregion

    }

    #region Contributing templates for set "FeedReader"

    #endregion
}

#region Fixed paths from set with name "FeedReaderConfiguration"

namespace MyDomainModel.FixedPaths.Content
{
    /// <summary>
    /// Access the item at /sitecore/content/Feeds.
    /// The availability of the item is validated in the databases: master.
    /// </summary>
    [FixedPathAttribute("{65163E61-BCA0-4746-817F-FDD475A1C320}", "/sitecore/content/Feeds", new string[] { "master" }, DomainObjectType = typeof(MyDomainModel.FeedReader.FeedCollection))]
    public static partial class FeedsFixed
    {

        public static MyDomainModel.FeedReader.FeedCollection GetFeedCollection(Database database)
        {
            return new MyDomainModel.FeedReader.FeedCollection(GetItem(database));
        }

        public static MyDomainModel.FeedReader.FeedCollection FeedCollection
        {
            get
            {
                return GetFeedCollection(Sitecore.Context.Database);
            }
        }

        public static MyDomainModel.FeedReader.FeedCollection FeedCollectionFromMaster
        {
            get
            {
                return GetFeedCollection(Database.GetDatabase("master"));
            }
        }

        private static Item GetItem(Database database)
        {
            Item item = database.GetItem(ID.Parse("{65163E61-BCA0-4746-817F-FDD475A1C320}"));
            if (item != null)
            {
                return "/sitecore/content/Feeds".Equals(item.Paths.FullPath)
                    ? item
                    : (database.GetItem("/sitecore/content/Feeds") ?? item);
            }
            else
            {
                return database.GetItem("/sitecore/content/Feeds");
            }
        }
    }
}

namespace MyDomainModel.FixedPaths
{
    /// <summary>
    /// Access the item at /sitecore/content.
    /// The availability of the item is validated in the databases: master.
    /// </summary>
    [FixedPathAttribute("{0DE95AE4-41AB-4D01-9EB0-67441B7C2450}", "/sitecore/content", new string[] { "master" })]
    public static partial class ContentFixed
    {

        public static ItemWrapper GetItemWrapper(Database database)
        {
            return new ItemWrapper(GetItem(database));
        }

        public static ItemWrapper ItemWrapper
        {
            get
            {
                return GetItemWrapper(Sitecore.Context.Database);
            }
        }

        public static ItemWrapper ItemWrapperFromMaster
        {
            get
            {
                return GetItemWrapper(Database.GetDatabase("master"));
            }
        }

        private static Item GetItem(Database database)
        {
            Item item = database.GetItem(ID.Parse("{0DE95AE4-41AB-4D01-9EB0-67441B7C2450}"));
            if (item != null)
            {
                return "/sitecore/content".Equals(item.Paths.FullPath)
                    ? item
                    : (database.GetItem("/sitecore/content") ?? item);
            }
            else
            {
                return database.GetItem("/sitecore/content");
            }
        }
    }
}

namespace MyDomainModel.FixedPaths.Content
{
    /// <summary>
    /// Access the item at /sitecore/content/Comments.
    /// The availability of the item is validated in the databases: master.
    /// </summary>
    [FixedPathAttribute("{AFB27B25-41E5-4CFD-8C95-E40B9A95FA69}", "/sitecore/content/Comments", new string[] { "master" })]
    public static partial class CommentsFixed
    {

        public static ItemWrapper GetItemWrapper(Database database)
        {
            return new ItemWrapper(GetItem(database));
        }

        public static ItemWrapper ItemWrapper
        {
            get
            {
                return GetItemWrapper(Sitecore.Context.Database);
            }
        }

        public static ItemWrapper ItemWrapperFromMaster
        {
            get
            {
                return GetItemWrapper(Database.GetDatabase("master"));
            }
        }

        private static Item GetItem(Database database)
        {
            Item item = database.GetItem(ID.Parse("{AFB27B25-41E5-4CFD-8C95-E40B9A95FA69}"));
            if (item != null)
            {
                return "/sitecore/content/Comments".Equals(item.Paths.FullPath)
                    ? item
                    : (database.GetItem("/sitecore/content/Comments") ?? item);
            }
            else
            {
                return database.GetItem("/sitecore/content/Comments");
            }
        }
    }
}

#endregion

namespace MyDomainModel.RelativeFixedPaths
{
    /// <summary>
    /// Base class for fixed paths that can be used relative to other items.
    /// </summary>
    public abstract partial class RelativeFixedPath
    {
        /// <summary>
        /// The Sitecore item for the relative path at this point.
        /// </summary>
        public Item RelativeFixedPathItem { get; private set; }

        /// <summary>
        /// Use this constructor to create a relative fixed path tree starting with the item that is passed.
        /// </summary>
        /// <param name="relativeFixedPathItem">The item to start the tree with</param>
        public RelativeFixedPath(Item relativeFixedPathItem)
        {
            RelativeFixedPathItem = relativeFixedPathItem;
        }

        /// <summary>
        /// Because relative fixed paths cannot be validated (except for the original structure), runtime validation can be done using this method.
        /// </summary>
        /// <returns>Messages for each failed validation, or null if everything is ok</returns>
        public abstract string[] GetValidationMessages();

        protected void Validate(List<string> validationMessages, string childName, RelativeFixedPath childRelativeFixedPath)
        {
            if (childRelativeFixedPath != null)
            {
                validationMessages.AddRange(childRelativeFixedPath.GetValidationMessages() ?? new string[0]);
            }
            else
            {
                validationMessages.Add(string.Format("Could not find a child item '{0}' for relative fixed path item '{1}'.", childName, RelativeFixedPathItem.Paths.FullPath));
            }
        }

        protected void ValidateType<T>(List<string> validationMessages, Item RelativeFixedPathItem) where T : IItemWrapper
        {
            if (!typeof(T).IsAssignableFrom(ItemWrapper.CreateTypedWrapper(RelativeFixedPathItem).GetType()))
            {
                validationMessages.Add(string.Format("The item {0} was expected to be a {1}, but it was a {2}", RelativeFixedPathItem.Paths.FullPath, typeof(T).Name, RelativeFixedPathItem.TemplateName));
            }
        }
    }
}

#region Relative fixed paths from set with name "FeedReaderConfiguration"

#endregion

