// Refresh from URL: http://sitecorewebsite/sitecore%20modules/Shell/CompiledDomainModel/CodeGenerator.aspx?direct=CustomGenerators%5cWcfServiceGenerator
/*
 * This file was generated by the CompiledDomainModel Sitecore module (version 0.5.0.0).
 * The version of the domain model (auto-incremented) is 30.
 * Please do not modify anything in this file, as any modifications will be lost after re-generating it.
 * Instead, you can extend the functionality of the classes and interfaces in this file using partial classes, inheritance or extension methods.
 * 
 * Visit http://trac.sitecore.net/CompiledDomainModel/wiki if you need more information.
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.ServiceModel;
using MyDomainModel.Wcf;
using MyDomainModel;
using Sitecore.Data;
using System.Runtime.Serialization;
using Sitecore.SecurityModel;

namespace MyDomainModel.Wcf
{

    #region Service contract

    [ServiceContract]
    public partial class SitecoreService
    {
        private Database Database
        {
            get
            {
                return Sitecore.Context.Database ?? Database.GetDatabase("master");
            }
        }

        [OperationContract]
        public Item GetItemById(Guid itemId)
        {
            return WrapItem(Database.GetItem(new ID(itemId)));
        }

        [OperationContract]
        public Item GetItemByPath(string itemPath)
        {
            return WrapItem(Database.GetItem(itemPath));
        }

        [OperationContract]
        public Item GetRootItem()
        {
            return WrapItem(Database.GetRootItem());
        }

        [OperationContract]
        public Item[] GetItemsByIds(Guid[] itemIds)
        {
            return (from itemId in itemIds
                    let item = GetItemById(itemId)
                    where item != null
                    select item).ToArray();
        }

        [OperationContract]
        public Item[] SelectItems(string query)
        {
            return WrapItems(Database.SelectItems(query));
        }

        [OperationContract]
        public Item SelectSingleItem(string query)
        {
            return WrapItem(Database.SelectSingleItem(query));
        }

        [OperationContract]
        public Item[] SelectItemsUsingXPath(string query)
        {
            return WrapItems(Database.SelectItemsUsingXPath(query));
        }

        [OperationContract]
        public Item SelectSingleItemUsingXPath(string query)
        {
            return WrapItem(Database.SelectSingleItemUsingXPath(query));
        }

        [OperationContract]
        public Item[] GetChildren(Guid parentItemId)
        {
            return WrapItems(Database.GetItem(new ID(parentItemId)).GetChildren().InnerChildren);
        }

        [OperationContract]
        public Item CreateItem(Guid parentItemId, Item newItem)
        {
            Sitecore.Data.Items.Item parentItem = Database.GetItem(new ID(parentItemId));
            // TODO: Remove security disabler for production scenarios
            using (new SecurityDisabler())
            {
                Sitecore.Data.Items.Item newSitecoreItem = parentItem.Add(newItem.ItemName, new TemplateID(new ID(newItem.TemplateId)));
                newItem.ItemID = newSitecoreItem.ID.Guid;
                using (new Sitecore.Data.Items.EditContext(newSitecoreItem))
                {
                    newItem.CopyTo(ItemWrapper.CreateTypedWrapper(newSitecoreItem));
                }
            }
            return newItem;
        }

        [OperationContract]
        public void UpdateItem(Item item)
        {
            Sitecore.Data.Items.Item sitecoreItem = Database.GetItem(new ID(item.ItemID));
            // TODO: Remove security disabler for production scenarios
            using (new SecurityDisabler())
            {
                using (new Sitecore.Data.Items.EditContext(sitecoreItem))
                {
                    item.CopyTo(ItemWrapper.CreateTypedWrapper(sitecoreItem));
                }
            }
        }

        [OperationContract]
        public void DeleteItem(Item item)
        {
            Sitecore.Data.Items.Item sitecoreItem = Database.GetItem(new ID(item.ItemID));
            using (new SecurityDisabler())
            {
                // TODO: Remove security disabler for production scenarios
                sitecoreItem.Delete();
            }
        }

        [OperationContract]
        public FixedPaths GetFixedPaths()
        {
            return new FixedPaths(GetItemById);
        }

        private static Item WrapItem(Sitecore.Data.Items.Item item)
        {
            return item != null ? Item.CreateTypedItem(ItemWrapper.CreateTypedWrapper(item)) : null;
        }

        private static Item[] WrapItems(IEnumerable<Sitecore.Data.Items.Item> items)
        {
            return items != null && items.Count() > 0
                ? items.Select(pItem => Item.CreateTypedItem(ItemWrapper.CreateTypedWrapper(pItem))).ToArray()
                : null;
        }
    }

    #endregion

    [DataContract]
    [KnownType(typeof(DomainObjectBase))]
    public partial class Item
    {
        protected static readonly IDictionary<Type, Type> TypeMappings = new Dictionary<Type, Type>
        {
          {typeof(MyDomainModel.FeedReader.FeedCollection) , typeof(FeedCollection) },
          {typeof(MyDomainModel.FeedReader.Feed) , typeof(Feed) },
          {typeof(MyDomainModel.FeedReader.FeedItem) , typeof(FeedItem) },
          {typeof(MyDomainModel.FeedReader.Comment) , typeof(Comment) },
        };

        internal virtual Guid TemplateId { get { return Guid.Empty; } }

        public static Item CreateTypedItem(ItemWrapper itemWrapper)
        {
            return (itemWrapper != null && TypeMappings.ContainsKey(itemWrapper.GetType()))
                ? TypeMappings[itemWrapper.GetType()].InvokeMember("ctor", System.Reflection.BindingFlags.CreateInstance, null, null, new object[] { itemWrapper }) as Item
                : new Item(itemWrapper);
        }

        public Item()
        {
        }

        /// <summary>
        /// Create using wrapper.
        /// </summary>
        /// <param name="itemWrapper">The wrapper to base the object on.</param>
        public Item(MyDomainModel.ItemWrapper itemWrapper)
        {
            ItemID = itemWrapper.Item.ID.ToGuid();
            ItemName = itemWrapper.Item.Name;
            ItemPath = itemWrapper.Item.Paths.FullPath;
            ItemLanguage = itemWrapper.Item.Language.Name;
            ItemVersion = itemWrapper.Item.Version.Number;
            Children = new ChildItemCollectionRef() { ParentId = ItemID };
        }

        /// <summary>
        /// Copy the field values of the item to the wrapper.
        /// </summary>
        /// <param name="itemWrapperToCopyTo">The wrapper to copy the field values to.</param>
        public virtual void CopyTo(MyDomainModel.ItemWrapper itemWrapperToCopyTo)
        {
            itemWrapperToCopyTo.Item.Name = ItemName;
        }

        [DataMember]
        public Guid ItemID { get; internal set; }

        [DataMember]
        public string ItemName { get; internal set; }

        [DataMember]
        public string ItemPath { get; internal set; }

        [DataMember]
        public string ItemLanguage { get; internal set; }

        [DataMember]
        public int ItemVersion { get; internal set; }

        [DataMember]
        public ChildItemCollectionRef Children { get; internal set; }

        protected virtual ItemRef GetItemRef(Sitecore.Data.Fields.Field field)
        {
            ItemRef result = new ItemRef();
            if (field.HasValue && ID.IsID(field.Value))
            {
                result.ReferenceId = ID.Parse(field.Value).ToGuid();
            }
            return result;
        }
    }

    [DataContract]
    public partial class ItemRef
    {
        [DataMember]
        public Guid ReferenceId { get; internal set; }
    }

    [DataContract]
    public partial class ItemCollectionRef
    {
        [DataMember]
        public Guid[] ReferenceIds { get; internal set; }
    }

    [DataContract]
    public partial class ChildItemCollectionRef
    {
        [DataMember]
        public Guid ParentId { get; internal set; }
    }

    [DataContract]
    [KnownType(typeof(FeedCollection))]
    [KnownType(typeof(Feed))]
    [KnownType(typeof(FeedItem))]
    [KnownType(typeof(Comment))]
    public partial class DomainObjectBase : Item
    {

        public DomainObjectBase()
        {
        }

        // create using wrapper
        public DomainObjectBase(MyDomainModel.DomainObjectBase itemWrapper)
            : base(itemWrapper)
        {
        }
    }

    #region Domain objects for set "FeedReader"

    [DataContract]
    public partial class FeedCollection : DomainObjectBase
    {
        internal override Guid TemplateId { get { return new Guid("{D937A3F8-AC08-4524-BF91-0B17C6947D9C}"); } }

        public FeedCollection()
        {
        }

        // create using wrapper
        public FeedCollection(MyDomainModel.FeedReader.FeedCollection itemWrapper)
            : base(itemWrapper)
        {
            RemoveOldItems = itemWrapper.RemoveOldItems;

        }

        public override void CopyTo(ItemWrapper itemWrapperToCopyTo)
        {
            base.CopyTo(itemWrapperToCopyTo);
            if (itemWrapperToCopyTo is MyDomainModel.FeedReader.FeedCollection)
            {
                ((MyDomainModel.FeedReader.FeedCollection)itemWrapperToCopyTo).RemoveOldItems = RemoveOldItems;

            }
        }

        #region Settings

        [DataMember]
        public bool RemoveOldItems { get; set; }

        #endregion

    }

    [DataContract]
    public partial class Feed : DomainObjectBase
    {
        internal override Guid TemplateId { get { return new Guid("{830E3C8F-9A0E-4058-BB6D-32BB9A0190FC}"); } }

        public Feed()
        {
        }

        // create using wrapper
        public Feed(MyDomainModel.FeedReader.Feed itemWrapper)
            : base(itemWrapper)
        {
            Url = itemWrapper.Url;

            Name = itemWrapper.Name;

        }

        public override void CopyTo(ItemWrapper itemWrapperToCopyTo)
        {
            base.CopyTo(itemWrapperToCopyTo);
            if (itemWrapperToCopyTo is MyDomainModel.FeedReader.Feed)
            {
                ((MyDomainModel.FeedReader.Feed)itemWrapperToCopyTo).Url = Url;

                ((MyDomainModel.FeedReader.Feed)itemWrapperToCopyTo).Name = Name;

            }
        }

        #region Feed settings

        [DataMember]
        public string Url { get; set; }

        [DataMember]
        public string Name { get; set; }

        #endregion

    }

    [DataContract]
    public partial class FeedItem : DomainObjectBase
    {
        internal override Guid TemplateId { get { return new Guid("{9B0A6EA2-BB48-4F02-9106-6687C819CD97}"); } }

        public FeedItem()
        {
        }

        // create using wrapper
        public FeedItem(MyDomainModel.FeedReader.FeedItem itemWrapper)
            : base(itemWrapper)
        {
            Title = itemWrapper.Title;

            Link = itemWrapper.Link;

            Description = itemWrapper.Description;

        }

        public override void CopyTo(ItemWrapper itemWrapperToCopyTo)
        {
            base.CopyTo(itemWrapperToCopyTo);
            if (itemWrapperToCopyTo is MyDomainModel.FeedReader.FeedItem)
            {
                ((MyDomainModel.FeedReader.FeedItem)itemWrapperToCopyTo).Title = Title;

                ((MyDomainModel.FeedReader.FeedItem)itemWrapperToCopyTo).Link = Link;

                ((MyDomainModel.FeedReader.FeedItem)itemWrapperToCopyTo).Description = Description;

            }
        }

        #region Feed item

        [DataMember]
        public string Title { get; set; }

        [DataMember]
        public string Link { get; set; }

        [DataMember]
        public string Description { get; set; }

        #endregion

    }

    [DataContract]
    public partial class Comment : DomainObjectBase
    {
        internal override Guid TemplateId { get { return new Guid("{A68AF918-0EE9-4A2E-8514-1165EBE1D7B0}"); } }

        public Comment()
        {
        }

        // create using wrapper
        public Comment(MyDomainModel.FeedReader.Comment itemWrapper)
            : base(itemWrapper)
        {
            Text = itemWrapper.Text;

            FeedItem = GetItemRef(itemWrapper.Item.Fields[new ID("{28E29796-50D2-4E51-88DE-A0089D2734BF}")]);
        }

        public override void CopyTo(ItemWrapper itemWrapperToCopyTo)
        {
            base.CopyTo(itemWrapperToCopyTo);
            if (itemWrapperToCopyTo is MyDomainModel.FeedReader.Comment)
            {
                ((MyDomainModel.FeedReader.Comment)itemWrapperToCopyTo).Text = Text;

                ((MyDomainModel.FeedReader.Comment)itemWrapperToCopyTo).FeedItem = ItemWrapper.CreateTypedWrapper(itemWrapperToCopyTo.Item.Database.GetItem(new ID(FeedItem.ReferenceId)));
            }
        }

        #region Comment

        [DataMember]
        public string Text { get; set; }

        [DataMember]
        public ItemRef FeedItem { get; set; }

        #endregion

    }

    #endregion

    [DataContract]
    public partial class FixedPaths
    {

        #region Fixed paths from set with name "FeedReaderConfiguration"

        [DataMember]
        public FeedCollection Content_Feeds { get; internal set; }

        [DataMember]
        public Item Content { get; internal set; }

        [DataMember]
        public Item Content_Comments { get; internal set; }

        #endregion

        public FixedPaths(Func<Guid, Item> loadFunction)
        {

            Content_Feeds = loadFunction(new Guid("{65163E61-BCA0-4746-817F-FDD475A1C320}")) as FeedCollection;

            Content = loadFunction(new Guid("{0DE95AE4-41AB-4D01-9EB0-67441B7C2450}"));

            Content_Comments = loadFunction(new Guid("{AFB27B25-41E5-4CFD-8C95-E40B9A95FA69}"));

        }

    }
}
