<%--
    CompiledDomainModel Sitecore module
    Copyright (C) 2010-2013 Robin Hermanussen

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ Control Language="C#" AutoEventWireup="true" CodeBehind="DomainModelGenerator.ascx.cs" Inherits="CompiledDomainModel.sitecore_modules.Shell.CompiledDomainModel.DomainModelGenerator" %>
<%@ Import Namespace="CompiledDomainModel.Dom" %>
<%@ Import Namespace="CompiledDomainModel.Utils" %>
<%@ Import Namespace="TemplateField=CompiledDomainModel.Dom.TemplateField" %>
// Refresh from URL: <%# RegenerateUrl %>
/*
 * This file was generated by the CompiledDomainModel Sitecore module (version <%# typeof(CompiledDomainModel.CodeGenerator).Assembly.GetName().Version%>).
 * User '<%# Sitecore.Context.User != null ? Sitecore.Context.User.Name : "<unknown>"%>' generated this file.
 * The version of the domain model (auto-incremented) is <%# DomainModelVersion %>.
 * Please do not modify anything in this file, as any modifications will be lost after re-generating it.
 * Instead, you can extend the functionality of the classes and interfaces in this file using partial classes, inheritance or extension methods.
 * 
 * Visit http://marketplace.sitecore.net/en/Modules/Compiled_Domain_Model.aspx if you need more information.
 */
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using Sitecore.Data;
using Sitecore.Data.Items;
using Sitecore.Data.Fields;
using Sitecore.Diagnostics;
<asp:Placeholder runat="server" Visible="<%# ! Settings.RemoveDependencies %>">using CompiledDomainModel.Attributes;</asp:Placeholder>

<asp:Placeholder runat="server" Visible='<%# ! Settings.PlatformMode || Settings.MustRenderPlatformSet("Core") %>'>
namespace <%# Settings.Namespace %>
{
    /// <summary>
    /// Wrapper class for Sitecore items. Provides typed access to related items.
    /// </summary><asp:Placeholder runat="server" Visible="<%# ! Settings.RemoveDependencies %>">
    [VersionAttribute("<%# typeof(CompiledDomainModel.CodeGenerator).Assembly.GetName().Version%>", <%# DomainModelVersion %>)]</asp:Placeholder>
    public partial class ItemWrapper : IItemWrapper, INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static IDictionary<ID, Type> typeMappings;

        /// <summary>
        /// Map template IDs to a corresponding type in the domain model.
        /// </summary>
        protected static IDictionary<ID, Type> TypeMappings
        {
            get
            {
                if(typeMappings == null)
                {<asp:PlaceHolder runat="server" Visible="<%# ! Settings.PlatformMode %>">
                     typeMappings = new Dictionary<ID, Type>
                        {
                        <asp:Repeater runat="server" DataSource="<%# Settings.AllTemplatesInSets %>">
                        <ItemTemplate>  { <%# ((TemplateInSet) Container.DataItem).FullClassName %>.TEMPLATE_ID, typeof(<%# ((TemplateInSet) Container.DataItem).FullClassName %>) },
                        </ItemTemplate></asp:Repeater>};</asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# Settings.PlatformMode %>">
                    typeMappings = CompiledDomainModel.Utils.PlatformModeUtil.GetAllPlatformTypeMappings(false);</asp:PlaceHolder>
                }
                return typeMappings;
            }
        }
            
        private static IDictionary<ID, Type> contributingTypeMappings;

        /// <summary>
        /// Map contributing template IDs to a corresponding interface.
        /// If a domain model class implements the interface, it means that the template inherits this contributing template.
        /// </summary>
        protected static IDictionary<ID, Type> ContributingTypeMappings
        {
            get
            {
                if(contributingTypeMappings == null)
                {<asp:PlaceHolder runat="server" Visible="<%# ! Settings.PlatformMode %>">
                     contributingTypeMappings = new Dictionary<ID, Type>
                        {
                        <asp:Repeater runat="server" DataSource="<%# Settings.AllContributingTemplatesInSets %>">
                        <ItemTemplate>  { <%# ((ContributingTemplateInSet) Container.DataItem).FullClassName %>.TEMPLATE_ID, typeof(<%# ((ContributingTemplateInSet)Container.DataItem).IFullClassName%>) },
                        </ItemTemplate></asp:Repeater>};</asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# Settings.PlatformMode %>">
                    contributingTypeMappings = CompiledDomainModel.Utils.PlatformModeUtil.GetAllPlatformTypeMappings(true);</asp:PlaceHolder>
                }
                return contributingTypeMappings;
            }
        }

        /// <summary>
        /// Determines what templates (within scope of the domain model configuration) a certain type supports.
        /// </summary>
        /// <typeparam name="T">The type to find valid template IDs for.</typeparam>
        /// <returns>A list of template IDs that are valid for the type.</returns>
        protected static IEnumerable<ID> GetValidTemplateIdsForType<T>() where T : IItemWrapper
        {
            return TypeMappings.Concat(ContributingTypeMappings).Where(typeMapping => typeof(T).IsAssignableFrom(typeMapping.Value)).Select(typeMapping => typeMapping.Key);
        }

        /// <summary>
        /// Event that is fired before the value of a field is changed through the domain model.
        /// </summary>
        public event PropertyChangingEventHandler PropertyChanging;

        /// <summary>
        /// Event that is fired after the value of a field is changed through the domain model.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// The Sitecore item that is wrapped. It must always be passed through a constructor.
        /// </summary>
        public Item Item { get; private set; }

        /// <summary>
        /// Create a wrapper for the passed in item.
        /// </summary>
        /// <param name="item">The Sitecore item to create a wrapper for.</param>
        public ItemWrapper(Item item)
        {
            Assert.IsNotNull(item, string.Format("No item was passed to create a new '{0}' object", GetType().ToString()));
            Item = item;
        }

        /// <summary>
        /// Use this method to wrap any Sitecore item. If the item can be used in a typed way, then you will get an object of that type.
        /// </summary>
        /// <param name="item">The Sitecore item to create a typed wrapper for.</param>
        /// <returns>An item wrapper (typed, if possible).</returns>
        public static ItemWrapper CreateTypedWrapper(Item item)
        {
            return (item != null && TypeMappings.ContainsKey(item.TemplateID))
                ? TypeMappings[item.TemplateID].InvokeMember("ctor", System.Reflection.BindingFlags.CreateInstance, null, null, new object[] { item }) as ItemWrapper
                : new ItemWrapper(item);
        }

        /// <summary>
        /// Get a typed wrapper for the parent of the item.
        /// </summary>
        public virtual IItemWrapper Parent
        {
            get
            {
                return Item.Parent != null ? CreateTypedWrapper(Item.Parent) : null;
            }
        }

        /// <summary>
        /// Get a list of typed wrappers for all the child items.
        /// </summary>
        public virtual IEnumerable<IItemWrapper> Children
        {
            get
            {
                if (!Item.HasChildren)
                {
                    return null;
                }
                IEnumerable<IItemWrapper> childObjects = Item.Children.InnerChildren.Select(child => CreateTypedWrapper(child)).Where(child => child != null).OfType<IItemWrapper>();
                return childObjects.Count() > 0 ? childObjects : null;
            }
        }

        /// <summary>
        /// Get a list of typed wrappers for all the child items that can be wrapped with the specified type.
        /// </summary>
        /// <typeparam name="T">The type to filter the children with.</typeparam>
        /// <returns>The list of children of the specified type.</returns>
        public virtual IEnumerable<T> GetChildren<T>() where T : IItemWrapper
        {
            IEnumerable<IItemWrapper> childObjects = Children;
            IEnumerable<T> typedChildren = childObjects != null ? childObjects.OfType<T>() : null;
            return typedChildren != null && typedChildren.Count() > 0 ? typedChildren : null;
        }

        /// <summary>
        /// Iterates all the item's ancestors and returns the first one that is of the specified type.
        /// </summary>
        /// <typeparam name="T">The type of ancestor that is needed.</typeparam>
        /// <returns>A typed wrapper for the first ancestor of the specified type.</returns>
        public virtual T GetFirstAncestor<T>() where T : class, IItemWrapper
        {
            IItemWrapper parent = Parent;
            if (parent == null)
            {
                return null;
            }
            else if (parent as T != null)
            {
                return parent as T;
            }
            return parent.GetFirstAncestor<T>();
        }

        /// <summary>
        /// Returns a list of all the item's descendants of the specified type.
        /// Warning: only use this if you're certain it will not return too much; could cause performance issues.
        /// </summary>
        /// <typeparam name="T">Type to filter the result with.</typeparam>
        /// <returns>The list of descendants of the specified type.</returns>
        public virtual IEnumerable<IItemWrapper> Descendants
        {
            get
            {
                Item[] descendantItems = Item.Axes.GetDescendants();
                if (descendantItems == null || descendantItems.Length == 0)
                {
                    return null;
                }
                IEnumerable<IItemWrapper> descendantObjects = descendantItems.Select(descendant => CreateTypedWrapper(descendant)).Where(descendant => descendant != null).OfType<IItemWrapper>();
                return descendantObjects.Count() > 0 ? descendantObjects : null;
            }
        }

        /// <summary>
        /// Returns a list of all the item's descendants of the specified type.
        /// Warning: only use this if you're certain it will not return too much; could cause performance issues.
        /// </summary>
        /// <typeparam name="T">Type to filter the result with.</typeparam>
        /// <returns>The list of descendants of the specified type.</returns>
        public virtual IEnumerable<T> GetDescendants<T>() where T : IItemWrapper
        {
            IEnumerable<IItemWrapper> descendants = Descendants;
            if (descendants == null || descendants.Count() == 0)
            {
                return null;
            }
            IEnumerable<T> descendantObjects = descendants.OfType<T>();
            return descendantObjects.Count() > 0 ? descendantObjects : null;
        }

        /// <summary>
        /// Gets a list of all the items that refer to this item.
        /// Warning: this only works if the link database is enabled.
        /// Visit http://sdn.sitecore.net/SDN5/Articles/Administration/Links%20Database.aspx for more information.
        /// </summary>
        public virtual IEnumerable<IItemWrapper> Referrers
        {
            get
            {
                Sitecore.Links.ItemLink[] referrers = Sitecore.Globals.LinkDatabase.GetReferrers(Item);
                if (referrers == null || referrers.Length == 0)
                {
                    return null;
                }
                IEnumerable<IItemWrapper> referrerObjects = referrers.Select(referrer => CreateTypedWrapper(referrer.GetSourceItem())).Where(referrer => referrer != null).OfType<IItemWrapper>();
                return referrerObjects.Count() > 0 ? referrerObjects : null;
            }
        }

        /// <summary>
        /// Gets a list of all the items that refer to this item and that are of the specified type.
        /// Warning: this only works if the link database is enabled.
        /// Visit http://sdn.sitecore.net/SDN5/Articles/Administration/Links%20Database.aspx for more information.
        /// </summary>
        /// <typeparam name="T">Type to filter the result with.</typeparam>
        /// <returns>A list of all the items that refer to this item and that are of the specified type.</returns>
        public virtual IEnumerable<T> GetReferrers<T>() where T : IItemWrapper
        {
            IEnumerable<IItemWrapper> referrerObjects = Referrers;
            IEnumerable<T> typedReferrerObjects = referrerObjects != null ? referrerObjects.OfType<T>() : null;
            return typedReferrerObjects != null && typedReferrerObjects.Count() > 0 ? typedReferrerObjects : null;
        }

        /// <summary>
        /// Checks to see if the wrappers wrap the same item (compares by id).
        /// </summary>
        /// <param name="obj">The object to compare to.</param>
        /// <returns>True if the item ID's are the same.</returns>
        public override bool Equals(object obj)
        {
            if (obj as ItemWrapper == null)
            {
                return false;
            }
            return Object.Equals(Item.ID, ((ItemWrapper)obj).Item.ID)
                && Object.Equals(Item.Version.Number, ((ItemWrapper)obj).Item.Version.Number)
                && Object.Equals(Item.Language, ((ItemWrapper)obj).Item.Language);
        }

        /// <summary>
        /// Creates a hashcode (for example, for use in a hashset).
        /// </summary>
        /// <returns>A unique hashcode for the object.</returns>
        public override int GetHashCode()
        {
            return ((Item.ID.GetHashCode() * 13) + 2)
                * ((Item.Version.Number.GetHashCode() * 23) + 8)
                * ((Item.Language.GetHashCode() * 97) + 12);
        }

        /// <summary>
        /// Can be used to signal event listeners that a property that is about to change.
        /// </summary>
        /// <param name="propertyName">The name of the property that is about to change.</param>
        protected virtual void RaisePropertyChanging(string propertyName)
        {
            if (PropertyChanging != null)
            {
                PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }

        /// <summary>
        /// Can be used to signal event listeners that a property has just changed.
        /// </summary>
        /// <param name="propertyName">The name of the property that has just changed.</param>
        protected virtual void RaisePropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        /// <summary>
        /// Get a Sitecore custom field by ID or fieldname (fallback).
        /// </summary>
        /// <typeparam name="T">The type of the field.</typeparam>
        /// <param name="fieldId">The Sitecore ID of the field.</param>
        /// <param name="fieldName">The name of the field.</param>
        /// <returns>The custom field object.</returns>
        protected virtual T GetField<T>(ID fieldId, string fieldName) where T : CustomField
        {
            return FieldTypeManager.GetField(GetField(fieldId, fieldName)) as T;
        }

        /// <summary>
        /// Get a Sitecore field by ID or fieldname (fallback).
        /// </summary>
        /// <param name="fieldId">The Sitecore ID of the field.</param>
        /// <param name="fieldName">The name of the field.</param>
        /// <returns>The field object.</returns>
        protected virtual Field GetField(ID fieldId, string fieldName)
        {
            return Item.Fields[fieldId] != null ? Item.Fields[fieldId] : Item.Fields[fieldName];
        }

        /// <summary>
        /// Override this method if you need a different strategy of resolving links within the domain model.
        /// </summary>
        /// <param name="link">The link field that needs to be resolved.</param>
        /// <returns>A string that represents the resolved link.</returns>
        protected virtual string ResolveLink(LinkField link)
        {
            return link.IsInternal || link.IsMediaLink
                ? ResolveLink(link.TargetItem)
                : link.Url;
        }

        /// <summary>
        /// Override this method if you need a different strategy of resolving links within the domain model.
        /// </summary>
        /// <param name="item">The item for which to resolve a link.</param>
        /// <returns>A string that represents the resolved link.</returns>
        protected virtual string ResolveLink(Item item)
        {
            return item != null ? Sitecore.Links.LinkManager.GetItemUrl(item) : null;
        }
    }

    /// <summary>
    /// The base class for all domain objects. Objects of this type can only be created for templates that are configured in the CompiledDomainModel configuration.
    /// </summary>
    public partial class DomainObjectBase : ItemWrapper
    {

        protected DomainObjectBase(Item item) : base(item)
        {
            Assert.IsTrue(ItemWrapper.TypeMappings.ContainsKey(item.TemplateID), string.Format("Tried to create a '{0}', but there is no domain object specified for template '{1}'", this.GetType().Name, item.TemplateName));
            Assert.IsTrue(this.GetType().IsAssignableFrom(ItemWrapper.TypeMappings[item.TemplateID]), string.Format("Tried to create a '{0}', but the template '{1}' is not valid for that type", this.GetType().Name, item.TemplateName));
        }
    }

    /// <summary>
    /// Interface for all wrappers and contributing templates.
    /// </summary>
    public partial interface IItemWrapper<asp:Placeholder runat="server" Visible="<%# ! Settings.RemoveDependencies %>"> : CompiledDomainModel.Core.IItemWrapperCore</asp:Placeholder>
    {<asp:Placeholder runat="server" Visible="<%# Settings.RemoveDependencies %>">
        Item Item { get; }</asp:Placeholder>
        IItemWrapper Parent { get; }
        IEnumerable<IItemWrapper> Children { get; }
        IEnumerable<T> GetChildren<T>() where T : IItemWrapper;
        T GetFirstAncestor<T>() where T : class, IItemWrapper;
        IEnumerable<IItemWrapper> Descendants { get; }
        IEnumerable<T> GetDescendants<T>() where T : IItemWrapper;
        IEnumerable<IItemWrapper> Referrers { get; }
        IEnumerable<T> GetReferrers<T>() where T : IItemWrapper;
    }

    /// <summary>
    /// Marker interface for all contributing templates (templates that are not used as domain model classes, but that are implemented by domain model classes).
    /// </summary>
    public partial interface IContributingTemplate : IItemWrapper
    {
    }

}
</asp:Placeholder>

<asp:Repeater runat="server" DataSource="<%# Settings.DomainObjectSets %>">
<ItemTemplate>
// Domain objects for set "<%# ((DomainObjectSet)Container.DataItem).Name %>"
namespace <%# ((DomainObjectSet) Container.DataItem).Namespace %>
{
<asp:Repeater runat="server" DataSource="<%# ((DomainObjectSet) Container.DataItem).TemplatesInSet %>">
    <ItemTemplate>
    /// <summary>
    /// Typed wrapper class for items with template <%# ((TemplateInSet) Container.DataItem).TemplateName %>.<asp:PlaceHolder runat="server" Visible="<%# ! string.IsNullOrEmpty(DomUtil.GetHelpText(((TemplateInSet)Container.DataItem).TemplateItem.InnerItem, 4)) %>">
    /// <%# DomUtil.GetHelpText(((TemplateInSet)Container.DataItem).TemplateItem.InnerItem, 4)%></asp:PlaceHolder>
    /// </summary><asp:Placeholder runat="server" Visible="<%# ! Settings.RemoveDependencies %>">
    [DomainObjectAttribute("<%# ((TemplateInSet) Container.DataItem).TemplateId %>", "<%# ((TemplateInSet) Container.DataItem).TemplateName %>", new string[] {<asp:Repeater runat="server" DataSource="<%# ((TemplateInSet) Container.DataItem).Databases %>"><ItemTemplate>"<%# Container.DataItem %>"</ItemTemplate><SeparatorTemplate>, </SeparatorTemplate></asp:Repeater>})]</asp:Placeholder>
    public partial class <%# ((TemplateInSet) Container.DataItem).ClassName %> : <%# ((TemplateInSet) Container.DataItem).BaseTemplateInSet != null ? ((TemplateInSet) Container.DataItem).BaseTemplateInSet.FullClassName : "DomainObjectBase" %><asp:Repeater runat="server" DataSource="<%# ((TemplateInSet) Container.DataItem).Contributions %>"><ItemTemplate>, <%# ((ContributingTemplateInSet)Container.DataItem).IFullClassName%></ItemTemplate></asp:Repeater>
    {
        public<%# ((TemplateInSet)Container.DataItem).BaseTemplateInSet != null ? " new" : ""%> const string TEMPLATE_NAME = "<%# ((TemplateInSet) Container.DataItem).TemplateName %>";
        public<%# ((TemplateInSet)Container.DataItem).BaseTemplateInSet != null ? " new" : ""%> static readonly ID TEMPLATE_ID = ID.Parse("<%# ((TemplateInSet) Container.DataItem).TemplateId %>");

        public <%# ((TemplateInSet) Container.DataItem).ClassName %>(Item item) : base(item)
        {
        }

        <asp:Repeater runat="server" DataSource="<%# ((TemplateInSet) Container.DataItem).SectionsIncludingContributions %>">
            <ItemTemplate>
        #region <%# ((TemplateSection) Container.DataItem).RegionName %><asp:PlaceHolder runat="server" Visible="<%# ((TemplateSection) Container.DataItem).IsContributing %>"> (from contributing template)</asp:PlaceHolder>
            <asp:PlaceHolder runat="server" Visible="<%# ! ((TemplateSection) Container.DataItem).IsContributing %>">
                <asp:Repeater runat="server" DataSource="<%# ((TemplateSection) Container.DataItem).TemplateFields %>">
                    <ItemTemplate><asp:Placeholder runat="server" Visible="<%# ! Settings.RemoveDependencies %>">
                [DomainObjectFieldAttribute("<%# ((TemplateField) Container.DataItem).FieldId %>", "<%# ((TemplateField) Container.DataItem).FieldName %>", "<%# ((TemplateField) Container.DataItem).FieldType %>")]</asp:Placeholder>
                public const string FIELD_<%# ((TemplateField) Container.DataItem).FieldConstantName %> = "<%# ((TemplateField) Container.DataItem).FieldName %>";
                    </ItemTemplate>
                </asp:Repeater>
            </asp:PlaceHolder>

            <asp:Repeater runat="server" DataSource="<%# ((TemplateSection) Container.DataItem).TemplateFields %>">
                <ItemTemplate>
                    <asp:PlaceHolder runat="server" Visible="<%# ! string.IsNullOrEmpty(DomUtil.GetHelpText(((TemplateField) Container.DataItem).FieldItem.InnerItem, 16)) %>">
                /// <summary>
                /// <%# DomUtil.GetHelpText(((TemplateField)Container.DataItem).FieldItem.InnerItem, 16)%>
                /// </summary></asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsMultilist %>">
                public IEnumerable<ItemWrapper> <%# ((TemplateField)Container.DataItem).FieldClassName%>
                {
                    get
                    {
                        Item[] targetItems = GetField<MultilistField>(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>").GetItems();
                        IEnumerable<ItemWrapper> targetObjects = targetItems != null
                            ? targetItems.Select(targetItem => ItemWrapper.CreateTypedWrapper(targetItem)).Where(targetItem => targetItem != null)
                            : null;
                        return targetObjects != null && targetObjects.Count() > 0 ? targetObjects : null;
                    }
                }

                public IEnumerable<T> Get<%# ((TemplateField)Container.DataItem).FieldClassName%><T>() where T : ItemWrapper
                {
                    IEnumerable<ItemWrapper> targetObjects = <%# ((TemplateField)Container.DataItem).FieldClassName%>;
                    IEnumerable<T> typedObjects = targetObjects != null ? targetObjects.OfType<T>() : null;
                    return typedObjects != null ? typedObjects : null;
                }
                    </asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsInternalLink %>">
                public ItemWrapper <%# ((TemplateField)Container.DataItem).FieldClassName%>
                {
                    get
                    {
                        Item item = GetField<InternalLinkField>(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>").TargetItem;
                        return item != null ? ItemWrapper.CreateTypedWrapper(item) : null;
                    }
                    set
                    {
                        InternalLinkField field = GetField<InternalLinkField>(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>");
                        if (Object.Equals(field.Value, value))
                        {
                            return;
                        }
                        RaisePropertyChanging("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                        field.Value = value.Item.ID.ToString();
                        RaisePropertyChanged("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                    }
                }

                public T Get<%# ((TemplateField)Container.DataItem).FieldClassName%><T>() where T : ItemWrapper
                {
                    return <%# ((TemplateField)Container.DataItem).FieldClassName%> as T;
                }
                    </asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsReferenceField %>">
                public ItemWrapper <%# ((TemplateField)Container.DataItem).FieldClassName%>
                {
                    get
                    {
                        Item item = GetField<ReferenceField>(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>").TargetItem;
                        return item != null ? ItemWrapper.CreateTypedWrapper(item) : null;
                    }
                    set
                    {
                        ReferenceField field = GetField<ReferenceField>(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>");
                        if (Object.Equals(field.Value, value))
                        {
                            return;
                        }
                        RaisePropertyChanging("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                        field.Value = value.Item.ID.ToString();
                        RaisePropertyChanged("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                    }
                }

                public T Get<%# ((TemplateField)Container.DataItem).FieldClassName%><T>() where T : ItemWrapper
                {
                    return <%# ((TemplateField)Container.DataItem).FieldClassName%> as T;
                }
                    </asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsLookupField %>">
                public ItemWrapper <%# ((TemplateField)Container.DataItem).FieldClassName%>
                {
                    get
                    {
                        Item item = GetField<LookupField>(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>").TargetItem;
                        return item != null ? ItemWrapper.CreateTypedWrapper(item) : null;
                    }
                    set
                    {
                        LookupField field = GetField<LookupField>(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>");
                        if (Object.Equals(field.Value, value))
                        {
                            return;
                        }
                        RaisePropertyChanging("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                        field.Value = value.Item.ID.ToString();
                        RaisePropertyChanged("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                    }
                }

                public T Get<%# ((TemplateField)Container.DataItem).FieldClassName%><T>() where T : ItemWrapper
                {
                    return <%# ((TemplateField)Container.DataItem).FieldClassName%> as T;
                }
                    </asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsCheckbox %>">
                public bool <%# ((TemplateField)Container.DataItem).FieldClassName%>
                {
                    get
                    {
                        return GetField<CheckboxField>(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>").Checked;
                    }
                    set
                    {
                        CheckboxField field = GetField<CheckboxField>(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>");
                        if (Object.Equals(field.Checked, value))
                        {
                            return;
                        }
                        RaisePropertyChanging("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                        field.Checked = value;
                        RaisePropertyChanged("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                    }
                }
                    </asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsDate %>">
                public DateTime <%# ((TemplateField)Container.DataItem).FieldClassName%>
                {
                    get
                    {
                        return GetField<DateField>(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>").DateTime;
                    }
                    set
                    {
                        DateField field = GetField<DateField>(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>");
                        if (Object.Equals(field.Value, value != null ? Sitecore.DateUtil.ToIsoDate(value) : null))
                        {
                            return;
                        }
                        RaisePropertyChanging("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                        field.Value = value != null ? Sitecore.DateUtil.ToIsoDate(value) : null;
                        RaisePropertyChanged("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                    }
                }
                    </asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsUrl %>">
                public string <%# ((TemplateField)Container.DataItem).FieldClassName%>
                {
                    get
                    {
                        LinkField link = GetField<LinkField>(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>");
                        return ResolveLink(link);
                    }
                    set
                    {
                        LinkField field = GetField<LinkField>(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>");
                        if (Object.Equals(field.Url, value))
                        {
                            return;
                        }
                        RaisePropertyChanging("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                        field.Url = value;
                        RaisePropertyChanged("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                    }
                }
                    </asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsNumeric %>">
                public long? <%# ((TemplateField)Container.DataItem).FieldClassName%>
                {
                    get
                    {
                        string strValue = GetField(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>").Value;
                        long result;
                        return !string.IsNullOrEmpty(strValue) && long.TryParse(strValue, System.Globalization.NumberStyles.Integer, System.Globalization.CultureInfo.InvariantCulture, out result) ? result : null as long?;
                    }
                    set
                    {
                        Field field = GetField(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>");
                        if (Object.Equals(field.Value, value))
                        {
                            return;
                        }
                        RaisePropertyChanging("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                        field.Value = value.HasValue ? value.ToString() : null;
                        RaisePropertyChanged("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                    }
                }
                    </asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsDecimal %>">
                public double? <%# ((TemplateField)Container.DataItem).FieldClassName%>
                {
                    get
                    {
                        string strValue = GetField(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>").Value;
                        double result;
                        return !string.IsNullOrEmpty(strValue) && double.TryParse(strValue, System.Globalization.NumberStyles.Number, System.Globalization.CultureInfo.InvariantCulture, out result) ? result : null as double?;
                    }
                    set
                    {
                        Field field = GetField(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>");
                        if (Object.Equals(field.Value, value))
                        {
                            return;
                        }
                        RaisePropertyChanging("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                        field.Value = value.HasValue ? value.ToString() : null;
                        RaisePropertyChanged("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                    }
                }
                    </asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsImage %>">
                public string <%# ((TemplateField)Container.DataItem).FieldClassName%>
                {
                    get
                    {
                        ImageField link = GetField<ImageField>(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>");
                        return ResolveLink(link.MediaItem);
                    }
                    set
                    {
                        ImageField field = GetField<ImageField>(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>");
                        if (Object.Equals(field.Value, value))
                        {
                            return;
                        }
                        RaisePropertyChanging("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                        field.Value = value;
                        RaisePropertyChanged("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                    }
                }
                    </asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsFile %>">
                public string <%# ((TemplateField)Container.DataItem).FieldClassName%>
                {
                    get
                    {
                        FileField link = GetField<FileField>(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>");
                        return ResolveLink(link.MediaItem);
                    }
                    set
                    {
                        FileField field = GetField<FileField>(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>");
                        if (Object.Equals(field.Value, value))
                        {
                            return;
                        }
                        RaisePropertyChanging("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                        field.Value = value;
                        RaisePropertyChanged("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                    }
                }
                    </asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsUnmapped %>">
                public string <%# ((TemplateField)Container.DataItem).FieldClassName%>
                {
                    get
                    {
                        return GetField(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>").Value;
                    }
                    set
                    {
                        Field field = GetField(ID.Parse("<%# ((TemplateField) Container.DataItem).FieldId %>"), "<%# ((TemplateField) Container.DataItem).FieldName %>");
                        if (Object.Equals(field.Value, value))
                        {
                            return;
                        }
                        RaisePropertyChanging("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                        field.Value = value;
                        RaisePropertyChanged("<%# ((TemplateField)Container.DataItem).FieldClassName%>");
                    }
                }
                    </asp:PlaceHolder>
                </ItemTemplate>
            </asp:Repeater>
        #endregion
            </ItemTemplate>
        </asp:Repeater>
    }
    </ItemTemplate>
</asp:Repeater>

    #region Contributing templates for set "<%# ((DomainObjectSet)Container.DataItem).Name %>"
<asp:Repeater runat="server" DataSource="<%# ((DomainObjectSet) Container.DataItem).ContributingTemplatesInSet %>">
    <ItemTemplate>
    /// <summary>
    /// Static helper class for contributing template <%# ((ContributingTemplateInSet)Container.DataItem).TemplateName%>.<asp:PlaceHolder runat="server" Visible="<%# ! string.IsNullOrEmpty(DomUtil.GetHelpText(((ContributingTemplateInSet)Container.DataItem).TemplateItem.InnerItem, 4)) %>">
    /// <%# DomUtil.GetHelpText(((ContributingTemplateInSet)Container.DataItem).TemplateItem.InnerItem, 4)%></asp:PlaceHolder>
    /// </summary><asp:Placeholder runat="server" Visible="<%# ! Settings.RemoveDependencies %>">
    [DomainObjectAttribute("<%# ((ContributingTemplateInSet) Container.DataItem).TemplateId %>", "<%# ((ContributingTemplateInSet)Container.DataItem).TemplateName%>", new string[] {<asp:Repeater runat="server" DataSource="<%# ((ContributingTemplateInSet) Container.DataItem).Databases %>"><ItemTemplate>"<%# Container.DataItem %>"</ItemTemplate><SeparatorTemplate>, </SeparatorTemplate></asp:Repeater>}, true)]</asp:Placeholder>
    public static partial class <%# ((ContributingTemplateInSet)Container.DataItem).ClassName%>
    {
        public const string TEMPLATE_NAME = "<%# ((ContributingTemplateInSet)Container.DataItem).TemplateName%>";
        public static readonly ID TEMPLATE_ID = ID.Parse("<%# ((ContributingTemplateInSet)Container.DataItem).TemplateId%>");

        <asp:Repeater runat="server" DataSource="<%# ((ContributingTemplateInSet) Container.DataItem).Sections %>">
            <ItemTemplate>
        #region <%# ((TemplateSection) Container.DataItem).RegionName %>

        <asp:Repeater runat="server" DataSource="<%# ((TemplateSection) Container.DataItem).TemplateFields %>">
            <ItemTemplate><asp:Placeholder runat="server" Visible="<%# ! Settings.RemoveDependencies %>">
        [DomainObjectFieldAttribute("<%# ((TemplateField) Container.DataItem).FieldId %>", "<%# ((TemplateField) Container.DataItem).FieldName %>", "<%# ((TemplateField) Container.DataItem).FieldType %>")]</asp:Placeholder>
        public const string FIELD_<%# ((TemplateField) Container.DataItem).FieldConstantName %> = "<%# ((TemplateField) Container.DataItem).FieldName %>";
            </ItemTemplate>
        </asp:Repeater>

        #endregion
            </ItemTemplate>
        </asp:Repeater>
    }

    /// <summary>
    /// Interface that describes the structure for contributing template <%# ((ContributingTemplateInSet)Container.DataItem).TemplateName%>.<asp:PlaceHolder runat="server" Visible="<%# ! string.IsNullOrEmpty(DomUtil.GetHelpText(((ContributingTemplateInSet)Container.DataItem).TemplateItem.InnerItem, 4)) %>">
    /// <%# DomUtil.GetHelpText(((ContributingTemplateInSet)Container.DataItem).TemplateItem.InnerItem, 4)%></asp:PlaceHolder>
    /// </summary>
    public partial interface I<%# ((ContributingTemplateInSet)Container.DataItem).ClassName%> : IContributingTemplate<asp:Repeater runat="server" DataSource="<%# ((ContributingTemplateInSet)Container.DataItem).BaseContributingTemplatesInSet %>"><ItemTemplate>, <%# ((ContributingTemplateInSet)Container.DataItem).IFullClassName%></ItemTemplate></asp:Repeater>
    {
        <asp:Repeater runat="server" DataSource="<%# ((ContributingTemplateInSet) Container.DataItem).Sections %>">
            <ItemTemplate>
        #region <%# ((TemplateSection) Container.DataItem).RegionName %>

            <asp:Repeater  runat="server" DataSource="<%# ((TemplateSection) Container.DataItem).TemplateFields %>">
                <ItemTemplate>
                    <asp:PlaceHolder runat="server" Visible="<%# ! string.IsNullOrEmpty(DomUtil.GetHelpText(((TemplateField) Container.DataItem).FieldItem.InnerItem, 8)) %>">
        /// <summary>
        /// <%# DomUtil.GetHelpText(((TemplateField)Container.DataItem).FieldItem.InnerItem, 8)%>
        /// </summary></asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsMultilist %>">
        IEnumerable<ItemWrapper> <%# ((TemplateField)Container.DataItem).FieldClassName%> { get; }

        IEnumerable<T> Get<%# ((TemplateField)Container.DataItem).FieldClassName%><T>() where T : ItemWrapper;
                    </asp:PlaceHolder>
                    <asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsInternalLink || ((TemplateField) Container.DataItem).IsReferenceField || ((TemplateField) Container.DataItem).IsLookupField %>">
        ItemWrapper <%# ((TemplateField)Container.DataItem).FieldClassName%> { get; set; }

        T Get<%# ((TemplateField)Container.DataItem).FieldClassName%><T>() where T : ItemWrapper;
                    </asp:PlaceHolder>
                    <asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsCheckbox %>">
        bool <%# ((TemplateField)Container.DataItem).FieldClassName%> { get; set; }
                    </asp:PlaceHolder>
                    <asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsDate %>">
         DateTime <%# ((TemplateField)Container.DataItem).FieldClassName%> { get;set; }
                    </asp:PlaceHolder>
                    <asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsUrl || ((TemplateField) Container.DataItem).IsImage || ((TemplateField) Container.DataItem).IsFile %>">
        string <%# ((TemplateField)Container.DataItem).FieldClassName%> { get; set; }
                    </asp:PlaceHolder>
                    <asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsNumeric %>">
        long? <%# ((TemplateField)Container.DataItem).FieldClassName%> { get; set; }
                    </asp:PlaceHolder>
                    <asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsDecimal %>">
        double? <%# ((TemplateField)Container.DataItem).FieldClassName%> { get; set; }
                    </asp:PlaceHolder>
                    <asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsUnmapped %>">
        string <%# ((TemplateField)Container.DataItem).FieldClassName%> { get; set; }
                    </asp:PlaceHolder>
                </ItemTemplate>
            </asp:Repeater>
        #endregion
            </ItemTemplate>
        </asp:Repeater>
    }
    </ItemTemplate>
</asp:Repeater>
    #endregion
}
</ItemTemplate>
</asp:Repeater>

<asp:Repeater runat="server" DataSource="<%# Settings.FixedPathSets %>">
<ItemTemplate>
#region Fixed paths from set with name "<%# ((FixedPathSet)Container.DataItem).Name %>"
<asp:Repeater runat="server" DataSource="<%# ((FixedPathSet) Container.DataItem).FixedTreeLocations %>">
<ItemTemplate>
namespace <%# Settings.Namespace %>.FixedPaths<%# ((FixedTreeLocation) Container.DataItem).Namespace %>
{
    /// <summary>
    /// Access the item at <%# ((FixedTreeLocation) Container.DataItem).Item.Paths.FullPath %>.
    /// The availability of the item is validated in the databases: <asp:Repeater runat="server" DataSource="<%# ((FixedTreeLocation) Container.DataItem).Databases %>"><ItemTemplate><%# Container.DataItem %></ItemTemplate><SeparatorTemplate>, </SeparatorTemplate></asp:Repeater>.
    /// </summary><asp:Placeholder runat="server" Visible="<%# ! Settings.RemoveDependencies %>">
    [FixedPathAttribute("<%# ((FixedTreeLocation) Container.DataItem).Item.ID %>", "<%# ((FixedTreeLocation) Container.DataItem).Item.Paths.FullPath %>", new string[] {<asp:Repeater runat="server" DataSource="<%# ((FixedTreeLocation) Container.DataItem).Databases %>"><ItemTemplate>"<%# Container.DataItem %>"</ItemTemplate><SeparatorTemplate>, </SeparatorTemplate></asp:Repeater>}<asp:PlaceHolder runat="server" Visible="<%# ((FixedTreeLocation) Container.DataItem).DomainObject != null %>">, DomainObjectType=typeof(<%# ((FixedTreeLocation)Container.DataItem).DomainObject != null ? ((FixedTreeLocation)Container.DataItem).DomainObject.FullClassName : null %>)</asp:PlaceHolder>)]</asp:Placeholder>
    public static partial class <%# ((FixedTreeLocation) Container.DataItem).ClassName %>Fixed
    {
        <asp:PlaceHolder runat="server" Visible="<%# ((FixedTreeLocation) Container.DataItem).DomainObject != null %>">
        public static <%# ((FixedTreeLocation)Container.DataItem).DomainObject != null ? ((FixedTreeLocation)Container.DataItem).DomainObject.FullClassName : null %> Get<%# ((FixedTreeLocation)Container.DataItem).DomainObject != null ? ((FixedTreeLocation)Container.DataItem).DomainObject.ClassName : null %>(Database database)
        {
            return new <%# ((FixedTreeLocation)Container.DataItem).DomainObject != null ? ((FixedTreeLocation)Container.DataItem).DomainObject.FullClassName : null %>(GetItem(database));
        }

        public static <%# ((FixedTreeLocation)Container.DataItem).DomainObject != null ? string.Format("{0} {1}", ((FixedTreeLocation)Container.DataItem).DomainObject.FullClassName, ((FixedTreeLocation)Container.DataItem).DomainObject.ClassName) : null%>
        {
            get
            {
                return Get<%# ((FixedTreeLocation)Container.DataItem).DomainObject != null ? ((FixedTreeLocation)Container.DataItem).DomainObject.ClassName : null %>(Sitecore.Context.Database);
            }
        }

            <asp:Repeater runat="server" DataSource="<%# ((FixedTreeLocation) Container.DataItem).Databases %>">
                <ItemTemplate>
        public static <%# ((FixedTreeLocation)DataBinder.Eval(Container, "Parent.Parent.Parent.DataItem")).DomainObject != null ? ((FixedTreeLocation)DataBinder.Eval(Container, "Parent.Parent.Parent.DataItem")).DomainObject.FullClassName : null%> <%# ((FixedTreeLocation)DataBinder.Eval(Container, "Parent.Parent.Parent.DataItem")).DomainObject != null ? ((FixedTreeLocation)DataBinder.Eval(Container, "Parent.Parent.Parent.DataItem")).DomainObject.ClassName : null%>From<%# char.ToUpper(Container.DataItem.ToString()[0]) + Container.DataItem.ToString().Substring(1) %>
        {
            get
            {
                return Get<%# ((FixedTreeLocation)DataBinder.Eval(Container, "Parent.Parent.Parent.DataItem")).DomainObject != null ? ((FixedTreeLocation)DataBinder.Eval(Container, "Parent.Parent.Parent.DataItem")).DomainObject.ClassName : null%>(Database.GetDatabase("<%# Container.DataItem %>"));
            }
        }
                </ItemTemplate>
            </asp:Repeater>
        </asp:PlaceHolder>
        <asp:PlaceHolder runat="server" Visible="<%# ((FixedTreeLocation) Container.DataItem).DomainObject == null %>">
        public static ItemWrapper GetItemWrapper(Database database)
        {
            return new ItemWrapper(GetItem(database));
        }

        public static ItemWrapper ItemWrapper
        {
            get
            {
                return GetItemWrapper(Sitecore.Context.Database);
            }
        }

            <asp:Repeater runat="server" DataSource="<%# ((FixedTreeLocation) Container.DataItem).Databases %>">
                <ItemTemplate>
        public static ItemWrapper ItemWrapperFrom<%# char.ToUpper(Container.DataItem.ToString()[0]) + Container.DataItem.ToString().Substring(1) %>
        {
            get
            {
                return GetItemWrapper(Database.GetDatabase("<%# Container.DataItem %>"));
            }
        }
                </ItemTemplate>
            </asp:Repeater>
        </asp:PlaceHolder>
        private static Item GetItem(Database database)
        {
            Item item = database.GetItem(ID.Parse("<%# ((FixedTreeLocation) Container.DataItem).Item.ID.ToString() %>"));
            if (item != null)
            {
                return "<%# ((FixedTreeLocation) Container.DataItem).Item.Paths.FullPath %>".Equals(item.Paths.FullPath)
                    ? item
                    : (database.GetItem("<%# ((FixedTreeLocation) Container.DataItem).Item.Paths.FullPath %>") ?? item);
            }
            else
            {
                return database.GetItem("<%# ((FixedTreeLocation) Container.DataItem).Item.Paths.FullPath %>");
            }
        }
    }
}
</ItemTemplate>
</asp:Repeater>
#endregion
</ItemTemplate>
</asp:Repeater>

<asp:Placeholder runat="server" Visible='<%# ! Settings.PlatformMode || Settings.MustRenderPlatformSet("Core") %>'>
namespace <%# Settings.Namespace %>.RelativeFixedPaths
{
    /// <summary>
    /// Base class for fixed paths that can be used relative to other items.
    /// </summary>
    public abstract partial class RelativeFixedPath
    {
        /// <summary>
        /// The Sitecore item for the relative path at this point.
        /// </summary>
        public Item RelativeFixedPathItem { get; private set; }

        /// <summary>
        /// Use this constructor to create a relative fixed path tree starting with the item that is passed.
        /// </summary>
        /// <param name="relativeFixedPathItem">The item to start the tree with</param>
        public RelativeFixedPath(Item relativeFixedPathItem)
        {
            RelativeFixedPathItem = relativeFixedPathItem;
        }

        /// <summary>
        /// Because relative fixed paths cannot be validated (except for the original structure), runtime validation can be done using this method.
        /// </summary>
        /// <returns>Messages for each failed validation, or null if everything is ok</returns>
        public abstract string[] GetValidationMessages();

        protected void Validate(List<string> validationMessages, string childName, RelativeFixedPath childRelativeFixedPath)
        {
            if (childRelativeFixedPath != null)
            {
                validationMessages.AddRange(childRelativeFixedPath.GetValidationMessages() ?? new string[0]);
            }
            else
            {
                validationMessages.Add(string.Format("Could not find a child item '{0}' for relative fixed path item '{1}'.", childName, RelativeFixedPathItem.Paths.FullPath));
            }
        }

        protected void ValidateType<T>(List<string> validationMessages, Item RelativeFixedPathItem) where T : IItemWrapper
        {
            if (! typeof(T).IsAssignableFrom(ItemWrapper.CreateTypedWrapper(RelativeFixedPathItem).GetType()))
            {
                validationMessages.Add(string.Format("The item {0} was expected to be a {1}, but it was a {2}", RelativeFixedPathItem.Paths.FullPath, typeof(T).Name, RelativeFixedPathItem.TemplateName));
            }
        }
    }
}
</asp:Placeholder>

<asp:Repeater runat="server" DataSource="<%# Settings.FixedPathSets %>">
<ItemTemplate>
#region Relative fixed paths from set with name "<%# ((FixedPathSet)Container.DataItem).Name %>"
<asp:Repeater runat="server" DataSource="<%# ((FixedPathSet) Container.DataItem).RelativeFixedTreeLocations %>">
<ItemTemplate>
namespace <%# Settings.Namespace %>.RelativeFixedPaths<%# ((RelativeFixedTreeLocation) Container.DataItem).Namespace %>
{
    <asp:Repeater runat="server" DataSource="<%# ((RelativeFixedTreeLocation) Container.DataItem).ChildNamespaces %>">
    <ItemTemplate>using <%# Settings.Namespace %>.RelativeFixedPaths<%# Container.DataItem %>;
    </ItemTemplate>
    </asp:Repeater>

    /// <summary>
    /// Access the item at <%# ((RelativeFixedTreeLocation)Container.DataItem).Namespace%>, relative to the item from which it was created.
    /// </summary><asp:Placeholder runat="server" Visible="<%# ! Settings.RemoveDependencies %>">
    [FixedPathAttribute("<%# ((RelativeFixedTreeLocation)Container.DataItem).Item.ID%>", "<%# ((RelativeFixedTreeLocation)Container.DataItem).Item.Paths.FullPath%>", new string[] {<asp:Repeater runat="server" DataSource="<%# ((RelativeFixedTreeLocation) Container.DataItem).Databases %>"><ItemTemplate>"<%# Container.DataItem %>"</ItemTemplate><SeparatorTemplate>, </SeparatorTemplate></asp:Repeater>}<asp:PlaceHolder runat="server" Visible="<%# ((RelativeFixedTreeLocation) Container.DataItem).DomainObject != null %>">, DomainObjectType=typeof(<%# ((RelativeFixedTreeLocation)Container.DataItem).DomainObject != null ? ((RelativeFixedTreeLocation)Container.DataItem).DomainObject.FullClassName : null%>)</asp:PlaceHolder>)]</asp:Placeholder>
    public partial class <%# ((RelativeFixedTreeLocation) Container.DataItem).ClassName %>Fixed : RelativeFixedPath
    {
        /// <summary>
        /// Create the relative fixed path starting with the the child named "<%# ((RelativeFixedTreeLocation)Container.DataItem).Item.Name %>" of the passed in item.
        /// </summary>
        public static <%# ((RelativeFixedTreeLocation) Container.DataItem).ClassName %>Fixed FromParent(Item relativeFixedPathItemParent)
        {
            Item child = relativeFixedPathItemParent.Axes.GetChild("<%# ((RelativeFixedTreeLocation)Container.DataItem).Item.Name %>");
            return child != null ? new <%# ((RelativeFixedTreeLocation) Container.DataItem).ClassName %>Fixed(child) : null;
        }

        public <%# ((RelativeFixedTreeLocation) Container.DataItem).ClassName %>Fixed(Item relativeFixedPathItem) : base(relativeFixedPathItem)
        {
        }

        <asp:Repeater runat="server" DataSource="<%# ((RelativeFixedTreeLocation) Container.DataItem).Children %>">
        <ItemTemplate>
        private <%# ((RelativeFixedTreeLocation) Container.DataItem).ClassName %>Fixed <%# ((RelativeFixedTreeLocation)Container.DataItem).ClassName.Substring(0,1).ToLowerInvariant() + ((RelativeFixedTreeLocation)Container.DataItem).ClassName.Substring(1)%> { get; set; }
        public <%# ((RelativeFixedTreeLocation) Container.DataItem).ClassName %>Fixed <%# ((RelativeFixedTreeLocation) Container.DataItem).ClassName %>
        {
            get
            {
                if (<%# ((RelativeFixedTreeLocation)Container.DataItem).ClassName.Substring(0,1).ToLowerInvariant() + ((RelativeFixedTreeLocation)Container.DataItem).ClassName.Substring(1)%> == null)
                {
                    Item child = RelativeFixedPathItem.Axes.GetChild("<%# ((RelativeFixedTreeLocation)Container.DataItem).Item.Name %>");
                    if (child != null)
                    {
                        <%# ((RelativeFixedTreeLocation)Container.DataItem).ClassName.Substring(0,1).ToLowerInvariant() + ((RelativeFixedTreeLocation)Container.DataItem).ClassName.Substring(1)%> = new <%# ((RelativeFixedTreeLocation) Container.DataItem).ClassName %>Fixed(child);
                    }
                }
                return <%# ((RelativeFixedTreeLocation)Container.DataItem).ClassName.Substring(0,1).ToLowerInvariant() + ((RelativeFixedTreeLocation)Container.DataItem).ClassName.Substring(1)%>;
            }
        }
        </ItemTemplate>
        </asp:Repeater>

        <asp:PlaceHolder runat="server" Visible="<%# ((RelativeFixedTreeLocation) Container.DataItem).DomainObject != null %>">
        private <%# ((RelativeFixedTreeLocation)Container.DataItem).DomainObject != null ? ((RelativeFixedTreeLocation)Container.DataItem).DomainObject.FullClassName : null%><%# ((RelativeFixedTreeLocation)Container.DataItem).DomainObject != null ? " " + ((RelativeFixedTreeLocation)Container.DataItem).DomainObject.ClassName.Substring(0, 1).ToLowerInvariant() + ((RelativeFixedTreeLocation)Container.DataItem).DomainObject.ClassName.Substring(1) : null%> { get; set; }
        public <%# ((RelativeFixedTreeLocation)Container.DataItem).DomainObject != null ? string.Format("{0} {1}", ((RelativeFixedTreeLocation)Container.DataItem).DomainObject.FullClassName, ((RelativeFixedTreeLocation)Container.DataItem).DomainObject.ClassName) : null%>
        {
            get
            {
                if (<%# ((RelativeFixedTreeLocation)Container.DataItem).DomainObject != null ? ((RelativeFixedTreeLocation)Container.DataItem).DomainObject.ClassName.Substring(0, 1).ToLowerInvariant() + ((RelativeFixedTreeLocation)Container.DataItem).DomainObject.ClassName.Substring(1) : null%> == null)
                {
                    <%# ((RelativeFixedTreeLocation)Container.DataItem).DomainObject != null ? ((RelativeFixedTreeLocation)Container.DataItem).DomainObject.ClassName.Substring(0, 1).ToLowerInvariant() + ((RelativeFixedTreeLocation)Container.DataItem).DomainObject.ClassName.Substring(1) : null%> = new <%# ((RelativeFixedTreeLocation)Container.DataItem).DomainObject != null ? ((RelativeFixedTreeLocation)Container.DataItem).DomainObject.FullClassName : null%>(RelativeFixedPathItem);
                }
                return <%# ((RelativeFixedTreeLocation)Container.DataItem).DomainObject != null ? ((RelativeFixedTreeLocation)Container.DataItem).DomainObject.ClassName.Substring(0, 1).ToLowerInvariant() + ((RelativeFixedTreeLocation)Container.DataItem).DomainObject.ClassName.Substring(1) : null%>;
            }
        }
        </asp:PlaceHolder>
        <asp:PlaceHolder runat="server" Visible="<%# ((RelativeFixedTreeLocation) Container.DataItem).DomainObject == null %>">
        private ItemWrapper itemWrapper { get; set; }
        public ItemWrapper ItemWrapper
        {
            get
            {
                if(itemWrapper == null)
                {
                    itemWrapper = new ItemWrapper(RelativeFixedPathItem);
                }
                return itemWrapper;
            }
        }
        </asp:PlaceHolder>

        public override string[] GetValidationMessages()
        {
            <asp:PlaceHolder runat="server" Visible="<%# ((RelativeFixedTreeLocation) Container.DataItem).Children == null && ((RelativeFixedTreeLocation) Container.DataItem).DomainObject == null %>">return null;</asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((RelativeFixedTreeLocation) Container.DataItem).Children != null || ((RelativeFixedTreeLocation) Container.DataItem).DomainObject != null %>">List<string> validationMessages = new List<string>();
            <asp:Repeater runat="server" DataSource="<%# ((RelativeFixedTreeLocation) Container.DataItem).Children %>">
            <ItemTemplate>Validate(validationMessages, "<%# ((RelativeFixedTreeLocation) Container.DataItem).Item.Name %>", <%# ((RelativeFixedTreeLocation) Container.DataItem).ClassName %>);
            </ItemTemplate>
            </asp:Repeater><asp:Placeholder runat="server" Visible="<%# ((RelativeFixedTreeLocation) Container.DataItem).DomainObject != null %>">ValidateType<<%# ((RelativeFixedTreeLocation)Container.DataItem).DomainObject != null ? ((RelativeFixedTreeLocation)Container.DataItem).DomainObject.FullClassName : null%>>(validationMessages, RelativeFixedPathItem);
            </asp:Placeholder>return validationMessages.Count > 0 ? validationMessages.ToArray() : null;</asp:PlaceHolder>
        }
    }
}
</ItemTemplate>
</asp:Repeater>
#endregion
</ItemTemplate>
</asp:Repeater>