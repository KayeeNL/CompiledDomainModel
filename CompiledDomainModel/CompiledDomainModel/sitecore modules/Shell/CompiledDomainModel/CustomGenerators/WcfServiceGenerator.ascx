<%--
    CompiledDomainModel Sitecore module
    Copyright (C) 2010-2011 Robin Hermanussen

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
--%>
<%@ Control Language="C#" AutoEventWireup="true" CodeBehind="../DomainModelGenerator.ascx.cs" Inherits="CompiledDomainModel.sitecore_modules.Shell.CompiledDomainModel.DomainModelGenerator" %>
<%@ Import Namespace="CompiledDomainModel.Dom" %>
<%@ Import Namespace="CompiledDomainModel.Utils" %>
<%@ Import Namespace="TemplateField=CompiledDomainModel.Dom.TemplateField" %>
// Refresh from URL: <%# Request.Url.AbsoluteUri.Contains('?') ? Request.Url.AbsoluteUri.Substring(0, Request.Url.AbsoluteUri.IndexOf('?')) : Request.Url.AbsoluteUri %>?direct=CustomGenerators%5cWcfServiceGenerator
/*
 * This file was generated by the CompiledDomainModel Sitecore module (version <%# typeof(CompiledDomainModel.CodeGenerator).Assembly.GetName().Version%>).
 * The version of the domain model (auto-incremented) is <%# DomainModelVersion %>.
 * Please do not modify anything in this file, as any modifications will be lost after re-generating it.
 * Instead, you can extend the functionality of the classes and interfaces in this file using partial classes, inheritance or extension methods.
 * 
 * Visit http://trac.sitecore.net/CompiledDomainModel/wiki if you need more information.
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.ServiceModel;
using <%# Settings.Namespace %>.Wcf;
using <%# Settings.Namespace %>;
using Sitecore.Data;
using System.Runtime.Serialization;
using Sitecore.SecurityModel;

namespace <%# Settings.Namespace %>.Wcf
{

    #region Service contract

    [ServiceContract]
    public partial class SitecoreService
    {
        private Database Database
        {
            get
            {
                return Sitecore.Context.Database ?? Database.GetDatabase("master");
            }
        }

        [OperationContract]
        public Item GetItemById(Guid itemId)
        {
            return WrapItem(Database.GetItem(new ID(itemId)));
        }

        [OperationContract]
        public Item GetItemByPath(string itemPath)
        {
            return WrapItem(Database.GetItem(itemPath));
        }

        [OperationContract]
        public Item GetRootItem()
        {
            return WrapItem(Database.GetRootItem());
        }

        [OperationContract]
        public Item[] GetItemsByIds(Guid[] itemIds)
        {
            return (from itemId in itemIds
                     let item = GetItemById(itemId)
                   where item != null
                  select item).ToArray();
        }

        [OperationContract]
        public Item[] SelectItems(string query)
        {
            return WrapItems(Database.SelectItems(query));
        }

        [OperationContract]
        public Item SelectSingleItem(string query)
        {
            return WrapItem(Database.SelectSingleItem(query));
        }

        [OperationContract]
        public Item[] SelectItemsUsingXPath(string query)
        {
            return WrapItems(Database.SelectItemsUsingXPath(query));
        }

        [OperationContract]
        public Item SelectSingleItemUsingXPath(string query)
        {
            return WrapItem(Database.SelectSingleItemUsingXPath(query));
        }

        [OperationContract]
        public Item[] GetChildren(Guid parentItemId)
        {
            return WrapItems(Database.GetItem(new ID(parentItemId)).GetChildren().InnerChildren);
        }

        [OperationContract]
        public Item CreateItem(Guid parentItemId, Item newItem)
        {
            Sitecore.Data.Items.Item parentItem = Database.GetItem(new ID(parentItemId));
            // TODO: Remove security disabler for production scenarios
            using (new SecurityDisabler())
            {
                Sitecore.Data.Items.Item newSitecoreItem = parentItem.Add(newItem.ItemName, new TemplateID(new ID( newItem.TemplateId)));
                newItem.ItemID = newSitecoreItem.ID.Guid;
                using (new Sitecore.Data.Items.EditContext(newSitecoreItem))
                {
                    newItem.CopyTo(ItemWrapper.CreateTypedWrapper(newSitecoreItem));
                }
            }
            return newItem;
        }

        [OperationContract]
        public void UpdateItem(Item item)
        {
            Sitecore.Data.Items.Item sitecoreItem = Database.GetItem(new ID(item.ItemID));
            // TODO: Remove security disabler for production scenarios
            using (new SecurityDisabler())
            {
                using (new Sitecore.Data.Items.EditContext(sitecoreItem))
                {
                    item.CopyTo(ItemWrapper.CreateTypedWrapper(sitecoreItem));
                }
            }
        }

        [OperationContract]
        public void DeleteItem(Item item)
        {
            Sitecore.Data.Items.Item sitecoreItem = Database.GetItem(new ID(item.ItemID));
            using (new SecurityDisabler())
            {
                // TODO: Remove security disabler for production scenarios
                sitecoreItem.Delete();
            }
        }

        [OperationContract]
        public FixedPaths GetFixedPaths()
        {
            return new FixedPaths(GetItemById);
        }

        private static Item WrapItem(Sitecore.Data.Items.Item item)
        {
            return item != null ? Item.CreateTypedItem(ItemWrapper.CreateTypedWrapper(item)) : null;
        }

        private static Item[] WrapItems(IEnumerable<Sitecore.Data.Items.Item> items)
        {
            return items != null && items.Count() > 0
                ? items.Select(pItem => Item.CreateTypedItem(ItemWrapper.CreateTypedWrapper(pItem))).ToArray()
                : null;
        }
    }

    #endregion

    [DataContract]
    [KnownType(typeof(DomainObjectBase))]
    public partial class Item
    {
        protected static readonly IDictionary<Type, Type> TypeMappings = new Dictionary<Type, Type>
        {
        <asp:Repeater runat="server" DataSource="<%# Settings.AllTemplatesInSets %>">
        <ItemTemplate>  {typeof(<%# ((TemplateInSet) Container.DataItem).FullClassName %>) , typeof(<%# ((TemplateInSet) Container.DataItem).ClassName %>) },
        </ItemTemplate></asp:Repeater>};

        internal virtual Guid TemplateId { get { return Guid.Empty; } }

        public static Item CreateTypedItem(ItemWrapper itemWrapper)
        {
            return (itemWrapper != null && TypeMappings.ContainsKey(itemWrapper.GetType()))
                ? TypeMappings[itemWrapper.GetType()].InvokeMember("ctor", System.Reflection.BindingFlags.CreateInstance, null, null, new object[] { itemWrapper }) as Item
                : new Item(itemWrapper);
        }

        public Item()
        {
        }

        /// <summary>
        /// Create using wrapper.
        /// </summary>
        /// <param name="itemWrapper">The wrapper to base the object on.</param>
        public Item(<%# Settings.Namespace %>.ItemWrapper itemWrapper)
        {
            ItemID = itemWrapper.Item.ID.ToGuid();
            ItemName = itemWrapper.Item.Name;
            ItemPath = itemWrapper.Item.Paths.FullPath;
            ItemLanguage = itemWrapper.Item.Language.Name;
            ItemVersion = itemWrapper.Item.Version.Number;
            Children = new ChildItemCollectionRef() { ParentId = ItemID };
        }

        /// <summary>
        /// Copy the field values of the item to the wrapper.
        /// </summary>
        /// <param name="itemWrapperToCopyTo">The wrapper to copy the field values to.</param>
        public virtual void CopyTo(<%# Settings.Namespace %>.ItemWrapper itemWrapperToCopyTo)
        {
            itemWrapperToCopyTo.Item.Name = ItemName;
        }

        [DataMember]
        public Guid ItemID { get; internal set; }

        [DataMember]
        public string ItemName { get; internal set; }

        [DataMember]
        public string ItemPath { get; internal set; }

        [DataMember]
        public string ItemLanguage { get; internal set; }

        [DataMember]
        public int ItemVersion { get; internal set; }

        [DataMember]
        public ChildItemCollectionRef Children { get; internal set; }

        protected virtual ItemRef GetItemRef(Sitecore.Data.Fields.Field field)
        {
            ItemRef result = new ItemRef();
            if(field.HasValue && ID.IsID(field.Value))
            {
                result.ReferenceId = ID.Parse(field.Value).ToGuid();
            }
            return result;
        }
    }

    [DataContract]
    public partial class ItemRef
    {
        [DataMember]
        public Guid ReferenceId { get; internal set; }
    }

    [DataContract]
    public partial class ItemCollectionRef
    {
        [DataMember]
        public Guid[] ReferenceIds { get; internal set; }
    }

    [DataContract]
    public partial class ChildItemCollectionRef
    {
        [DataMember]
        public Guid ParentId { get; internal set; }
    }

    [DataContract]<asp:Repeater runat="server" DataSource="<%# Settings.DomainObjectSets %>">
        <ItemTemplate><asp:Repeater runat="server" DataSource="<%# ((DomainObjectSet) Container.DataItem).TemplatesInSet %>">
                <ItemTemplate><asp:PlaceHolder runat="server" Visible="<%# ((TemplateInSet) Container.DataItem).BaseTemplateInSet == null %>">
    [KnownType(typeof(<%# ((TemplateInSet) Container.DataItem).ClassName %>))]</asp:PlaceHolder></ItemTemplate>
            </asp:Repeater></ItemTemplate>
    </asp:Repeater>
    public partial class DomainObjectBase : Item
    {
        
        public DomainObjectBase()
        {
        }

        // create using wrapper
        public DomainObjectBase(<%# Settings.Namespace %>.DomainObjectBase itemWrapper) : base(itemWrapper)
        {
        }
    }
    
<asp:Repeater runat="server" DataSource="<%# Settings.DomainObjectSets %>">
<ItemTemplate>
    #region Domain objects for set "<%# ((DomainObjectSet)Container.DataItem).Name %>"
<asp:Repeater runat="server" DataSource="<%# ((DomainObjectSet) Container.DataItem).TemplatesInSet %>">
    <ItemTemplate>
    
    [DataContract]<asp:Repeater runat="server" DataSource="<%# Settings.DomainObjectSets %>">
        <ItemTemplate><asp:Repeater runat="server" DataSource="<%# ((DomainObjectSet) Container.DataItem).TemplatesInSet %>">
                <ItemTemplate><asp:PlaceHolder runat="server" Visible=<%# ((TemplateInSet) Container.DataItem).BaseTemplateInSet != null && ((TemplateInSet) Container.DataItem).BaseTemplateInSet.TemplateId == ((TemplateInSet) DataBinder.Eval(Container, "Parent.Parent.Parent.Parent.DataItem")).TemplateId %>>
    [KnownType(typeof(<%# ((TemplateInSet) Container.DataItem).ClassName %>))]</asp:PlaceHolder></ItemTemplate>
            </asp:Repeater></ItemTemplate>
    </asp:Repeater>
    public partial class <%# ((TemplateInSet) Container.DataItem).ClassName %> : <%# ((TemplateInSet) Container.DataItem).BaseTemplateInSet != null ? ((TemplateInSet) Container.DataItem).BaseTemplateInSet.ClassName : "DomainObjectBase" %>
    {
        internal override Guid TemplateId { get { return new Guid("<%# ((TemplateInSet) Container.DataItem).TemplateId %>"); } }

        public <%# ((TemplateInSet) Container.DataItem).ClassName %>()
        {
        }

        // create using wrapper
        public <%# ((TemplateInSet) Container.DataItem).ClassName %>(<%# ((TemplateInSet) Container.DataItem).FullClassName %> itemWrapper) : base(itemWrapper)
        {<asp:Repeater runat="server" DataSource="<%# ((TemplateInSet) Container.DataItem).SectionsIncludingContributions %>">
    <ItemTemplate><asp:Repeater runat="server" DataSource="<%# ((TemplateSection) Container.DataItem).TemplateFields %>"><ItemTemplate>
            <asp:PlaceHolder runat="server" Visible="<%# (! ((TemplateField) Container.DataItem).IsMultilist) && (! (((TemplateField) Container.DataItem).IsInternalLink || ((TemplateField) Container.DataItem).IsReferenceField || ((TemplateField) Container.DataItem).IsLookupField)) %>"><%# ((TemplateField)Container.DataItem).FieldClassName%> = itemWrapper.<%# ((TemplateField)Container.DataItem).FieldClassName%>;</asp:PlaceHolder>
            <asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsMultilist %>"><%# ((TemplateField)Container.DataItem).FieldClassName%> = GetItemCollectionRef(new ID("<%# ((TemplateField)Container.DataItem).FieldId %>"));</asp:PlaceHolder>
            <asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsInternalLink || ((TemplateField) Container.DataItem).IsReferenceField || ((TemplateField) Container.DataItem).IsLookupField %>"><%# ((TemplateField)Container.DataItem).FieldClassName%> = GetItemRef(itemWrapper.Item.Fields[new ID("<%# ((TemplateField)Container.DataItem).FieldId %>")]);</asp:PlaceHolder></ItemTemplate>
    </asp:Repeater></ItemTemplate>
</asp:Repeater>
        }

        public override void CopyTo(ItemWrapper itemWrapperToCopyTo)
        {
            base.CopyTo(itemWrapperToCopyTo);
            if (itemWrapperToCopyTo is <%# ((TemplateInSet) Container.DataItem).FullClassName %>)
            {<asp:Repeater runat="server" DataSource="<%# ((TemplateInSet) Container.DataItem).SectionsIncludingContributions %>">
                    <ItemTemplate><asp:Repeater runat="server" DataSource="<%# ((TemplateSection) Container.DataItem).TemplateFields %>"><ItemTemplate>
                <asp:PlaceHolder runat="server" Visible="<%# (! ((TemplateField) Container.DataItem).IsMultilist) && (! (((TemplateField) Container.DataItem).IsInternalLink || ((TemplateField) Container.DataItem).IsReferenceField || ((TemplateField) Container.DataItem).IsLookupField)) %>">((<%# ((TemplateInSet)DataBinder.Eval(Container, "Parent.Parent.Parent.Parent.DataItem")).FullClassName%>) itemWrapperToCopyTo).<%# ((TemplateField)Container.DataItem).FieldClassName%> = <%# ((TemplateField)Container.DataItem).FieldClassName%>;</asp:PlaceHolder>
                <asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsMultilist %>">((<%# ((TemplateInSet)DataBinder.Eval(Container, "Parent.Parent.Parent.Parent.DataItem")).FullClassName%>) itemWrapperToCopyTo).<%# ((TemplateField)Container.DataItem).FieldClassName%> = <%# ((TemplateField)Container.DataItem).FieldClassName%>;</asp:PlaceHolder>
                <asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsInternalLink || ((TemplateField) Container.DataItem).IsReferenceField || ((TemplateField) Container.DataItem).IsLookupField %>">((<%# ((TemplateInSet)DataBinder.Eval(Container, "Parent.Parent.Parent.Parent.DataItem")).FullClassName%>) itemWrapperToCopyTo).<%# ((TemplateField)Container.DataItem).FieldClassName%> = ItemWrapper.CreateTypedWrapper(itemWrapperToCopyTo.Item.Database.GetItem(new ID(<%# ((TemplateField)Container.DataItem).FieldClassName%>.ReferenceId)));</asp:PlaceHolder></ItemTemplate>
                    </asp:Repeater></ItemTemplate>
                </asp:Repeater>
            }
        }

        <asp:Repeater runat="server" DataSource="<%# ((TemplateInSet) Container.DataItem).SectionsIncludingContributions %>">
            <ItemTemplate>
        #region <%# ((TemplateSection) Container.DataItem).RegionName %><asp:PlaceHolder runat="server" Visible="<%# ((TemplateSection) Container.DataItem).IsContributing %>"> (from contributing template)</asp:PlaceHolder>

            <asp:Repeater runat="server" DataSource="<%# ((TemplateSection) Container.DataItem).TemplateFields %>">
                <ItemTemplate>
        [DataMember]<asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsMultilist %>">
        public ItemCollectionRef <%# ((TemplateField)Container.DataItem).FieldClassName%> { get; set; }
                    </asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsInternalLink || ((TemplateField) Container.DataItem).IsReferenceField || ((TemplateField) Container.DataItem).IsLookupField %>">
        public ItemRef <%# ((TemplateField)Container.DataItem).FieldClassName%> { get; set; }
                    </asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsCheckbox %>">
        public bool <%# ((TemplateField)Container.DataItem).FieldClassName%> { get; set; }
                    </asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsDate %>">
        public DateTime <%# ((TemplateField)Container.DataItem).FieldClassName%> { get; set; }
                    </asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsUrl || ((TemplateField) Container.DataItem).IsImage || ((TemplateField) Container.DataItem).IsFile %>">
        public string <%# ((TemplateField)Container.DataItem).FieldClassName%> { get; set; }
                    </asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsNumeric %>">
        public long? <%# ((TemplateField)Container.DataItem).FieldClassName%> { get; set; }
                    </asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsDecimal %>">
        public double? <%# ((TemplateField)Container.DataItem).FieldClassName%> { get; set; }
                    </asp:PlaceHolder><asp:PlaceHolder runat="server" Visible="<%# ((TemplateField) Container.DataItem).IsUnmapped %>">
        public string <%# ((TemplateField)Container.DataItem).FieldClassName%> { get; set; }
                    </asp:PlaceHolder>
                </ItemTemplate>
            </asp:Repeater>
        #endregion
            </ItemTemplate>
        </asp:Repeater>
    }
    </ItemTemplate>
</asp:Repeater>
    #endregion
</ItemTemplate>
</asp:Repeater>

    [DataContract]
    public partial class FixedPaths
    {
        
<asp:Repeater runat="server" DataSource="<%# Settings.FixedPathSets %>">
<ItemTemplate>
        #region Fixed paths from set with name "<%# ((FixedPathSet)Container.DataItem).Name %>"
<asp:Repeater runat="server" DataSource="<%# ((FixedPathSet) Container.DataItem).FixedTreeLocations %>">
<ItemTemplate>
        [DataMember]
        public <%# ((FixedTreeLocation)Container.DataItem).DomainObject != null ? ((FixedTreeLocation)Container.DataItem).DomainObject.ClassName : "Item" %> <%# ((FixedTreeLocation) Container.DataItem).Namespace.Replace('.', '_').TrimStart(new char[] {'_'}) %><%# ((FixedTreeLocation)Container.DataItem).Parent != null ? "_" : "" %><%# ((FixedTreeLocation) Container.DataItem).ClassName %> { get; internal set; }
</ItemTemplate>
</asp:Repeater>
        #endregion
</ItemTemplate>
</asp:Repeater>

        public FixedPaths(Func<Guid,Item> loadFunction)
        {
<asp:Repeater runat="server" DataSource="<%# Settings.FixedPathSets %>">
<ItemTemplate>
<asp:Repeater runat="server" DataSource="<%# ((FixedPathSet) Container.DataItem).FixedTreeLocations %>">
<ItemTemplate>
            <%# ((FixedTreeLocation) Container.DataItem).Namespace.Replace('.', '_').TrimStart(new char[] {'_'}) %><%# ((FixedTreeLocation)Container.DataItem).Parent != null ? "_" : "" %><%# ((FixedTreeLocation) Container.DataItem).ClassName %> = loadFunction(new Guid("<%# ((FixedTreeLocation) Container.DataItem).Item.ID.ToString() %>"))<%# ((FixedTreeLocation)Container.DataItem).DomainObject != null ? string.Format(" as {0}", ((FixedTreeLocation)Container.DataItem).DomainObject.ClassName) : ""%>;
</ItemTemplate>
</asp:Repeater>
</ItemTemplate>
</asp:Repeater>

        }

    }
}